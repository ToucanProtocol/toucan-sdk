/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../common';

export type MinimalBatchDataStruct = {
  serialNumber: PromiseOrValue<string>;
  quantity: PromiseOrValue<BigNumberish>;
};

export type MinimalBatchDataStructOutput = [string, BigNumber] & {
  serialNumber: string;
  quantity: BigNumber;
};

export type CertificateDataStruct = {
  retirementEventIds: PromiseOrValue<BigNumberish>[];
  createdAt: PromiseOrValue<BigNumberish>;
  retiringEntity: PromiseOrValue<string>;
  beneficiary: PromiseOrValue<string>;
  retiringEntityString: PromiseOrValue<string>;
  beneficiaryString: PromiseOrValue<string>;
  retirementMessage: PromiseOrValue<string>;
  beneficiaryLocation: PromiseOrValue<string>;
  consumptionCountryCode: PromiseOrValue<string>;
  consumptionPeriodStart: PromiseOrValue<BigNumberish>;
  consumptionPeriodEnd: PromiseOrValue<BigNumberish>;
  retiredBatchesData: MinimalBatchDataStruct[];
};

export type CertificateDataStructOutput = [
  BigNumber[],
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  MinimalBatchDataStructOutput[]
] & {
  retirementEventIds: BigNumber[];
  createdAt: BigNumber;
  retiringEntity: string;
  beneficiary: string;
  retiringEntityString: string;
  beneficiaryString: string;
  retirementMessage: string;
  beneficiaryLocation: string;
  consumptionCountryCode: string;
  consumptionPeriodStart: BigNumber;
  consumptionPeriodEnd: BigNumber;
  retiredBatchesData: MinimalBatchDataStructOutput[];
};

export type CreateRetirementRequestParamsStruct = {
  tokenIds: PromiseOrValue<BigNumberish>[];
  amount: PromiseOrValue<BigNumberish>;
  retiringEntityString: PromiseOrValue<string>;
  beneficiary: PromiseOrValue<string>;
  beneficiaryString: PromiseOrValue<string>;
  retirementMessage: PromiseOrValue<string>;
  beneficiaryLocation: PromiseOrValue<string>;
  consumptionCountryCode: PromiseOrValue<string>;
  consumptionPeriodStart: PromiseOrValue<BigNumberish>;
  consumptionPeriodEnd: PromiseOrValue<BigNumberish>;
};

export type CreateRetirementRequestParamsStructOutput = [
  BigNumber[],
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  tokenIds: BigNumber[];
  amount: BigNumber;
  retiringEntityString: string;
  beneficiary: string;
  beneficiaryString: string;
  retirementMessage: string;
  beneficiaryLocation: string;
  consumptionCountryCode: string;
  consumptionPeriodStart: BigNumber;
  consumptionPeriodEnd: BigNumber;
};

export type RetirementEventStruct = {
  createdAt: PromiseOrValue<BigNumberish>;
  retiringEntity: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  projectVintageTokenId: PromiseOrValue<BigNumberish>;
};

export type RetirementEventStructOutput = [BigNumber, string, BigNumber, BigNumber] & {
  createdAt: BigNumber;
  retiringEntity: string;
  amount: BigNumber;
  projectVintageTokenId: BigNumber;
};

export interface IRetirementCertificatesInterface extends utils.Interface {
  functions: {
    'certificates(uint256)': FunctionFragment;
    'getData(uint256)': FunctionFragment;
    'mintCertificate(address,string,address,string,string,uint256[])': FunctionFragment;
    'mintCertificateWithExtraData(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256),uint256[],(string,uint256)[])': FunctionFragment;
    'registerEvent(address,uint256,uint256,bool)': FunctionFragment;
    'retirements(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'certificates'
      | 'getData'
      | 'mintCertificate'
      | 'mintCertificateWithExtraData'
      | 'registerEvent'
      | 'retirements'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'certificates',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getData', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'mintCertificate',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'mintCertificateWithExtraData',
    values: [
      PromiseOrValue<string>,
      CreateRetirementRequestParamsStruct,
      PromiseOrValue<BigNumberish>[],
      MinimalBatchDataStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'registerEvent',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'retirements',
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: 'certificates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintCertificate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintCertificateWithExtraData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerEvent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retirements', data: BytesLike): Result;

  events: {};
}

export interface IRetirementCertificates extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRetirementCertificatesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    certificates(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CertificateDataStructOutput]>;

    getData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CertificateDataStructOutput]>;

    mintCertificate(
      retiringEntity: PromiseOrValue<string>,
      retiringEntityString: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      beneficiaryString: PromiseOrValue<string>,
      retirementMessage: PromiseOrValue<string>,
      retirementEventIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintCertificateWithExtraData(
      retiringEntity: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      retirementEventIds: PromiseOrValue<BigNumberish>[],
      retiredBatchesData: MinimalBatchDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerEvent(
      retiringEntity: PromiseOrValue<string>,
      projectVintageTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLegacy: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retirements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[RetirementEventStructOutput]>;
  };

  certificates(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CertificateDataStructOutput>;

  getData(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CertificateDataStructOutput>;

  mintCertificate(
    retiringEntity: PromiseOrValue<string>,
    retiringEntityString: PromiseOrValue<string>,
    beneficiary: PromiseOrValue<string>,
    beneficiaryString: PromiseOrValue<string>,
    retirementMessage: PromiseOrValue<string>,
    retirementEventIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintCertificateWithExtraData(
    retiringEntity: PromiseOrValue<string>,
    params: CreateRetirementRequestParamsStruct,
    retirementEventIds: PromiseOrValue<BigNumberish>[],
    retiredBatchesData: MinimalBatchDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerEvent(
    retiringEntity: PromiseOrValue<string>,
    projectVintageTokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isLegacy: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retirements(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<RetirementEventStructOutput>;

  callStatic: {
    certificates(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CertificateDataStructOutput>;

    getData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CertificateDataStructOutput>;

    mintCertificate(
      retiringEntity: PromiseOrValue<string>,
      retiringEntityString: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      beneficiaryString: PromiseOrValue<string>,
      retirementMessage: PromiseOrValue<string>,
      retirementEventIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintCertificateWithExtraData(
      retiringEntity: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      retirementEventIds: PromiseOrValue<BigNumberish>[],
      retiredBatchesData: MinimalBatchDataStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerEvent(
      retiringEntity: PromiseOrValue<string>,
      projectVintageTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLegacy: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retirements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RetirementEventStructOutput>;
  };

  filters: {};

  estimateGas: {
    certificates(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getData(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    mintCertificate(
      retiringEntity: PromiseOrValue<string>,
      retiringEntityString: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      beneficiaryString: PromiseOrValue<string>,
      retirementMessage: PromiseOrValue<string>,
      retirementEventIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintCertificateWithExtraData(
      retiringEntity: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      retirementEventIds: PromiseOrValue<BigNumberish>[],
      retiredBatchesData: MinimalBatchDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerEvent(
      retiringEntity: PromiseOrValue<string>,
      projectVintageTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLegacy: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retirements(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    certificates(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintCertificate(
      retiringEntity: PromiseOrValue<string>,
      retiringEntityString: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      beneficiaryString: PromiseOrValue<string>,
      retirementMessage: PromiseOrValue<string>,
      retirementEventIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintCertificateWithExtraData(
      retiringEntity: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      retirementEventIds: PromiseOrValue<BigNumberish>[],
      retiredBatchesData: MinimalBatchDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerEvent(
      retiringEntity: PromiseOrValue<string>,
      projectVintageTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLegacy: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retirements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
