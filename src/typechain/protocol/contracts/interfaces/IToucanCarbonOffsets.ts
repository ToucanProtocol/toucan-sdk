/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export type ProjectDataStruct = {
  projectId: PromiseOrValue<string>;
  standard: PromiseOrValue<string>;
  methodology: PromiseOrValue<string>;
  region: PromiseOrValue<string>;
  storageMethod: PromiseOrValue<string>;
  method: PromiseOrValue<string>;
  emissionType: PromiseOrValue<string>;
  category: PromiseOrValue<string>;
  uri: PromiseOrValue<string>;
  beneficiary: PromiseOrValue<string>;
};

export type ProjectDataStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  projectId: string;
  standard: string;
  methodology: string;
  region: string;
  storageMethod: string;
  method: string;
  emissionType: string;
  category: string;
  uri: string;
  beneficiary: string;
};

export type VintageDataStruct = {
  name: PromiseOrValue<string>;
  startTime: PromiseOrValue<BigNumberish>;
  endTime: PromiseOrValue<BigNumberish>;
  projectTokenId: PromiseOrValue<BigNumberish>;
  totalVintageQuantity: PromiseOrValue<BigNumberish>;
  isCorsiaCompliant: PromiseOrValue<boolean>;
  isCCPcompliant: PromiseOrValue<boolean>;
  coBenefits: PromiseOrValue<string>;
  correspAdjustment: PromiseOrValue<string>;
  additionalCertification: PromiseOrValue<string>;
  uri: PromiseOrValue<string>;
  registry: PromiseOrValue<string>;
};

export type VintageDataStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  string,
  string,
  string,
  string,
  string
] & {
  name: string;
  startTime: BigNumber;
  endTime: BigNumber;
  projectTokenId: BigNumber;
  totalVintageQuantity: BigNumber;
  isCorsiaCompliant: boolean;
  isCCPcompliant: boolean;
  coBenefits: string;
  correspAdjustment: string;
  additionalCertification: string;
  uri: string;
  registry: string;
};

export type CreateRetirementRequestParamsStruct = {
  tokenIds: PromiseOrValue<BigNumberish>[];
  amount: PromiseOrValue<BigNumberish>;
  retiringEntityString: PromiseOrValue<string>;
  beneficiary: PromiseOrValue<string>;
  beneficiaryString: PromiseOrValue<string>;
  retirementMessage: PromiseOrValue<string>;
  beneficiaryLocation: PromiseOrValue<string>;
  consumptionCountryCode: PromiseOrValue<string>;
  consumptionPeriodStart: PromiseOrValue<BigNumberish>;
  consumptionPeriodEnd: PromiseOrValue<BigNumberish>;
};

export type CreateRetirementRequestParamsStructOutput = [
  BigNumber[],
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  tokenIds: BigNumber[];
  amount: BigNumber;
  retiringEntityString: string;
  beneficiary: string;
  beneficiaryString: string;
  retirementMessage: string;
  beneficiaryLocation: string;
  consumptionCountryCode: string;
  consumptionPeriodStart: BigNumber;
  consumptionPeriodEnd: BigNumber;
};

export interface IToucanCarbonOffsetsInterface extends utils.Interface {
  functions: {
    'burnFrom(address,uint256)': FunctionFragment;
    'getAttributes()': FunctionFragment;
    'getVintageData()': FunctionFragment;
    'projectVintageTokenId()': FunctionFragment;
    'retireAndMintCertificate(string,address,string,string,uint256)': FunctionFragment;
    'retireAndMintCertificateForEntity(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256))': FunctionFragment;
    'retireFrom(address,uint256)': FunctionFragment;
    'standardRegistry()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'burnFrom'
      | 'getAttributes'
      | 'getVintageData'
      | 'projectVintageTokenId'
      | 'retireAndMintCertificate'
      | 'retireAndMintCertificateForEntity'
      | 'retireFrom'
      | 'standardRegistry'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'burnFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getAttributes', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVintageData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'projectVintageTokenId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'retireAndMintCertificate',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'retireAndMintCertificateForEntity',
    values: [PromiseOrValue<string>, CreateRetirementRequestParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'retireFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'standardRegistry', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'burnFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAttributes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVintageData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'projectVintageTokenId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retireAndMintCertificate', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'retireAndMintCertificateForEntity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'retireFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'standardRegistry', data: BytesLike): Result;

  events: {};
}

export interface IToucanCarbonOffsets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IToucanCarbonOffsetsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAttributes(
      overrides?: CallOverrides
    ): Promise<[ProjectDataStructOutput, VintageDataStructOutput]>;

    getVintageData(
      overrides?: CallOverrides
    ): Promise<[VintageDataStructOutput] & { vintageData: VintageDataStructOutput }>;

    projectVintageTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    retireAndMintCertificate(
      retiringEntityString: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      beneficiaryString: PromiseOrValue<string>,
      retirementMessage: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retireAndMintCertificateForEntity(
      retiringEntity: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retireFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    standardRegistry(overrides?: CallOverrides): Promise<[string]>;
  };

  burnFrom(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAttributes(
    overrides?: CallOverrides
  ): Promise<[ProjectDataStructOutput, VintageDataStructOutput]>;

  getVintageData(overrides?: CallOverrides): Promise<VintageDataStructOutput>;

  projectVintageTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  retireAndMintCertificate(
    retiringEntityString: PromiseOrValue<string>,
    beneficiary: PromiseOrValue<string>,
    beneficiaryString: PromiseOrValue<string>,
    retirementMessage: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retireAndMintCertificateForEntity(
    retiringEntity: PromiseOrValue<string>,
    params: CreateRetirementRequestParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retireFrom(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  standardRegistry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAttributes(
      overrides?: CallOverrides
    ): Promise<[ProjectDataStructOutput, VintageDataStructOutput]>;

    getVintageData(overrides?: CallOverrides): Promise<VintageDataStructOutput>;

    projectVintageTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    retireAndMintCertificate(
      retiringEntityString: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      beneficiaryString: PromiseOrValue<string>,
      retirementMessage: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    retireAndMintCertificateForEntity(
      retiringEntity: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    retireFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    standardRegistry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAttributes(overrides?: CallOverrides): Promise<BigNumber>;

    getVintageData(overrides?: CallOverrides): Promise<BigNumber>;

    projectVintageTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    retireAndMintCertificate(
      retiringEntityString: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      beneficiaryString: PromiseOrValue<string>,
      retirementMessage: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retireAndMintCertificateForEntity(
      retiringEntity: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retireFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    standardRegistry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAttributes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVintageData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectVintageTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retireAndMintCertificate(
      retiringEntityString: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      beneficiaryString: PromiseOrValue<string>,
      retirementMessage: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retireAndMintCertificateForEntity(
      retiringEntity: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retireFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    standardRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
