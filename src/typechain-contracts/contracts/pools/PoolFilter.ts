/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface PoolFilterInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'addAttributes(bool,string[],string[],string[])': FunctionFragment;
    'addToExternalAllowlist(address[])': FunctionFragment;
    'addToExternalERC1155Allowlist(address[],uint256[])': FunctionFragment;
    'addToInternalAllowlist(address[])': FunctionFragment;
    'addToInternalBlocklist(address[])': FunctionFragment;
    'checkAttributeMatching(address)': FunctionFragment;
    'checkERC1155Eligible(address,uint256)': FunctionFragment;
    'checkEligible(address)': FunctionFragment;
    'contractRegistry()': FunctionFragment;
    'externalAllowlist(address)': FunctionFragment;
    'externalERC1155Allowlist(address,uint256)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'internalAllowlist(address)': FunctionFragment;
    'internalBlocklist(address)': FunctionFragment;
    'methodologies(string)': FunctionFragment;
    'methodologiesIsAcceptedMapping()': FunctionFragment;
    'minimumVintageStartTime()': FunctionFragment;
    'owner()': FunctionFragment;
    'paused()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'regions(string)': FunctionFragment;
    'regionsIsAcceptedMapping()': FunctionFragment;
    'removeFromExternalAllowlist(address[])': FunctionFragment;
    'removeFromExternalERC1155Allowlist(address[],uint256[])': FunctionFragment;
    'removeFromInternalAllowlist(address[])': FunctionFragment;
    'removeFromInternalBlocklist(address[])': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setMinimumVintageStartTime(uint64)': FunctionFragment;
    'setToucanContractRegistry(address)': FunctionFragment;
    'standards(string)': FunctionFragment;
    'standardsIsAcceptedMapping()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'switchMapping(string,bool)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'addAttributes'
      | 'addToExternalAllowlist'
      | 'addToExternalERC1155Allowlist'
      | 'addToInternalAllowlist'
      | 'addToInternalBlocklist'
      | 'checkAttributeMatching'
      | 'checkERC1155Eligible'
      | 'checkEligible'
      | 'contractRegistry'
      | 'externalAllowlist'
      | 'externalERC1155Allowlist'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'internalAllowlist'
      | 'internalBlocklist'
      | 'methodologies'
      | 'methodologiesIsAcceptedMapping'
      | 'minimumVintageStartTime'
      | 'owner'
      | 'paused'
      | 'proxiableUUID'
      | 'regions'
      | 'regionsIsAcceptedMapping'
      | 'removeFromExternalAllowlist'
      | 'removeFromExternalERC1155Allowlist'
      | 'removeFromInternalAllowlist'
      | 'removeFromInternalBlocklist'
      | 'renounceOwnership'
      | 'renounceRole'
      | 'revokeRole'
      | 'setMinimumVintageStartTime'
      | 'setToucanContractRegistry'
      | 'standards'
      | 'standardsIsAcceptedMapping'
      | 'supportsInterface'
      | 'switchMapping'
      | 'transferOwnership'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addAttributes',
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'addToExternalAllowlist',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'addToExternalERC1155Allowlist',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'addToInternalAllowlist',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'addToInternalBlocklist',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'checkAttributeMatching',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'checkERC1155Eligible',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'checkEligible', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'contractRegistry', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'externalAllowlist',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'externalERC1155Allowlist',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'internalAllowlist',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'internalBlocklist',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'methodologies', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'methodologiesIsAcceptedMapping',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'minimumVintageStartTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'regions', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'regionsIsAcceptedMapping', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeFromExternalAllowlist',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeFromExternalERC1155Allowlist',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeFromInternalAllowlist',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeFromInternalBlocklist',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMinimumVintageStartTime',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setToucanContractRegistry',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'standards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'standardsIsAcceptedMapping', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'switchMapping',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAttributes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addToExternalAllowlist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addToExternalERC1155Allowlist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addToInternalAllowlist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addToInternalBlocklist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkAttributeMatching', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkERC1155Eligible', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkEligible', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'externalAllowlist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'externalERC1155Allowlist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'internalAllowlist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'internalBlocklist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'methodologies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'methodologiesIsAcceptedMapping', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minimumVintageStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'regions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'regionsIsAcceptedMapping', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromExternalAllowlist', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeFromExternalERC1155Allowlist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'removeFromInternalAllowlist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromInternalBlocklist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinimumVintageStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setToucanContractRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'standards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'standardsIsAcceptedMapping', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'switchMapping', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'AttributeMethodologyAdded(string)': EventFragment;
    'AttributeMethodologyRemoved(string)': EventFragment;
    'AttributeRegionAdded(string)': EventFragment;
    'AttributeRegionRemoved(string)': EventFragment;
    'AttributeStandardAdded(string)': EventFragment;
    'AttributeStandardRemoved(string)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'ExternalAddressAllowlisted(address)': EventFragment;
    'ExternalAddressRemovedFromAllowlist(address)': EventFragment;
    'ExternalERC1155TokenAllowlisted(address,uint256)': EventFragment;
    'ExternalERC1155TokenRemovedFromAllowlist(address,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'InternalAddressAllowlisted(address)': EventFragment;
    'InternalAddressBlocklisted(address)': EventFragment;
    'InternalAddressRemovedFromAllowlist(address)': EventFragment;
    'InternalAddressRemovedFromBlocklist(address)': EventFragment;
    'MappingSwitched(string,bool)': EventFragment;
    'MinimumVintageStartTimeUpdated(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'ToucanRegistrySet(address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AttributeMethodologyAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AttributeMethodologyRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AttributeRegionAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AttributeRegionRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AttributeStandardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AttributeStandardRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExternalAddressAllowlisted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExternalAddressRemovedFromAllowlist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExternalERC1155TokenAllowlisted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExternalERC1155TokenRemovedFromAllowlist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InternalAddressAllowlisted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InternalAddressBlocklisted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InternalAddressRemovedFromAllowlist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InternalAddressRemovedFromBlocklist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MappingSwitched'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinimumVintageStartTimeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ToucanRegistrySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AttributeMethodologyAddedEventObject {
  methodology: string;
}
export type AttributeMethodologyAddedEvent = TypedEvent<
  [string],
  AttributeMethodologyAddedEventObject
>;

export type AttributeMethodologyAddedEventFilter = TypedEventFilter<AttributeMethodologyAddedEvent>;

export interface AttributeMethodologyRemovedEventObject {
  methodology: string;
}
export type AttributeMethodologyRemovedEvent = TypedEvent<
  [string],
  AttributeMethodologyRemovedEventObject
>;

export type AttributeMethodologyRemovedEventFilter =
  TypedEventFilter<AttributeMethodologyRemovedEvent>;

export interface AttributeRegionAddedEventObject {
  region: string;
}
export type AttributeRegionAddedEvent = TypedEvent<[string], AttributeRegionAddedEventObject>;

export type AttributeRegionAddedEventFilter = TypedEventFilter<AttributeRegionAddedEvent>;

export interface AttributeRegionRemovedEventObject {
  region: string;
}
export type AttributeRegionRemovedEvent = TypedEvent<[string], AttributeRegionRemovedEventObject>;

export type AttributeRegionRemovedEventFilter = TypedEventFilter<AttributeRegionRemovedEvent>;

export interface AttributeStandardAddedEventObject {
  standard: string;
}
export type AttributeStandardAddedEvent = TypedEvent<[string], AttributeStandardAddedEventObject>;

export type AttributeStandardAddedEventFilter = TypedEventFilter<AttributeStandardAddedEvent>;

export interface AttributeStandardRemovedEventObject {
  standard: string;
}
export type AttributeStandardRemovedEvent = TypedEvent<
  [string],
  AttributeStandardRemovedEventObject
>;

export type AttributeStandardRemovedEventFilter = TypedEventFilter<AttributeStandardRemovedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ExternalAddressAllowlistedEventObject {
  erc20addr: string;
}
export type ExternalAddressAllowlistedEvent = TypedEvent<
  [string],
  ExternalAddressAllowlistedEventObject
>;

export type ExternalAddressAllowlistedEventFilter =
  TypedEventFilter<ExternalAddressAllowlistedEvent>;

export interface ExternalAddressRemovedFromAllowlistEventObject {
  erc20addr: string;
}
export type ExternalAddressRemovedFromAllowlistEvent = TypedEvent<
  [string],
  ExternalAddressRemovedFromAllowlistEventObject
>;

export type ExternalAddressRemovedFromAllowlistEventFilter =
  TypedEventFilter<ExternalAddressRemovedFromAllowlistEvent>;

export interface ExternalERC1155TokenAllowlistedEventObject {
  tokenAddress: string;
  tokenId: BigNumber;
}
export type ExternalERC1155TokenAllowlistedEvent = TypedEvent<
  [string, BigNumber],
  ExternalERC1155TokenAllowlistedEventObject
>;

export type ExternalERC1155TokenAllowlistedEventFilter =
  TypedEventFilter<ExternalERC1155TokenAllowlistedEvent>;

export interface ExternalERC1155TokenRemovedFromAllowlistEventObject {
  tokenAddress: string;
  tokenId: BigNumber;
}
export type ExternalERC1155TokenRemovedFromAllowlistEvent = TypedEvent<
  [string, BigNumber],
  ExternalERC1155TokenRemovedFromAllowlistEventObject
>;

export type ExternalERC1155TokenRemovedFromAllowlistEventFilter =
  TypedEventFilter<ExternalERC1155TokenRemovedFromAllowlistEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InternalAddressAllowlistedEventObject {
  erc20addr: string;
}
export type InternalAddressAllowlistedEvent = TypedEvent<
  [string],
  InternalAddressAllowlistedEventObject
>;

export type InternalAddressAllowlistedEventFilter =
  TypedEventFilter<InternalAddressAllowlistedEvent>;

export interface InternalAddressBlocklistedEventObject {
  erc20addr: string;
}
export type InternalAddressBlocklistedEvent = TypedEvent<
  [string],
  InternalAddressBlocklistedEventObject
>;

export type InternalAddressBlocklistedEventFilter =
  TypedEventFilter<InternalAddressBlocklistedEvent>;

export interface InternalAddressRemovedFromAllowlistEventObject {
  erc20addr: string;
}
export type InternalAddressRemovedFromAllowlistEvent = TypedEvent<
  [string],
  InternalAddressRemovedFromAllowlistEventObject
>;

export type InternalAddressRemovedFromAllowlistEventFilter =
  TypedEventFilter<InternalAddressRemovedFromAllowlistEvent>;

export interface InternalAddressRemovedFromBlocklistEventObject {
  erc20addr: string;
}
export type InternalAddressRemovedFromBlocklistEvent = TypedEvent<
  [string],
  InternalAddressRemovedFromBlocklistEventObject
>;

export type InternalAddressRemovedFromBlocklistEventFilter =
  TypedEventFilter<InternalAddressRemovedFromBlocklistEvent>;

export interface MappingSwitchedEventObject {
  mappingName: string;
  accepted: boolean;
}
export type MappingSwitchedEvent = TypedEvent<[string, boolean], MappingSwitchedEventObject>;

export type MappingSwitchedEventFilter = TypedEventFilter<MappingSwitchedEvent>;

export interface MinimumVintageStartTimeUpdatedEventObject {
  minimumVintageStartTime: BigNumber;
}
export type MinimumVintageStartTimeUpdatedEvent = TypedEvent<
  [BigNumber],
  MinimumVintageStartTimeUpdatedEventObject
>;

export type MinimumVintageStartTimeUpdatedEventFilter =
  TypedEventFilter<MinimumVintageStartTimeUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface ToucanRegistrySetEventObject {
  registry: string;
}
export type ToucanRegistrySetEvent = TypedEvent<[string], ToucanRegistrySetEventObject>;

export type ToucanRegistrySetEventFilter = TypedEventFilter<ToucanRegistrySetEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface PoolFilter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolFilterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addAttributes(
      addToList: PromiseOrValue<boolean>,
      _regions: PromiseOrValue<string>[],
      _standards: PromiseOrValue<string>[],
      _methodologies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToExternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToExternalERC1155Allowlist(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToInternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToInternalBlocklist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkAttributeMatching(
      erc20Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkERC1155Eligible(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkEligible(erc20Addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    externalAllowlist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    externalERC1155Allowlist(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    internalAllowlist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    internalBlocklist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    methodologies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    methodologiesIsAcceptedMapping(overrides?: CallOverrides): Promise<[boolean]>;

    minimumVintageStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    regions(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    regionsIsAcceptedMapping(overrides?: CallOverrides): Promise<[boolean]>;

    removeFromExternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromExternalERC1155Allowlist(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromInternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromInternalBlocklist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumVintageStartTime(
      _minimumVintageStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToucanContractRegistry(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    standards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    standardsIsAcceptedMapping(overrides?: CallOverrides): Promise<[boolean]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    switchMapping(
      _mappingName: PromiseOrValue<string>,
      accepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addAttributes(
    addToList: PromiseOrValue<boolean>,
    _regions: PromiseOrValue<string>[],
    _standards: PromiseOrValue<string>[],
    _methodologies: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToExternalAllowlist(
    erc20Addr: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToExternalERC1155Allowlist(
    tokenAddresses: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToInternalAllowlist(
    erc20Addr: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToInternalBlocklist(
    erc20Addr: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkAttributeMatching(
    erc20Addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  checkERC1155Eligible(
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  checkEligible(erc20Addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  externalAllowlist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  externalERC1155Allowlist(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  internalAllowlist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  internalBlocklist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  methodologies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  methodologiesIsAcceptedMapping(overrides?: CallOverrides): Promise<boolean>;

  minimumVintageStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  regions(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  regionsIsAcceptedMapping(overrides?: CallOverrides): Promise<boolean>;

  removeFromExternalAllowlist(
    erc20Addr: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromExternalERC1155Allowlist(
    tokenAddresses: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromInternalAllowlist(
    erc20Addr: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromInternalBlocklist(
    erc20Addr: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumVintageStartTime(
    _minimumVintageStartTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToucanContractRegistry(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  standards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  standardsIsAcceptedMapping(overrides?: CallOverrides): Promise<boolean>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  switchMapping(
    _mappingName: PromiseOrValue<string>,
    accepted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addAttributes(
      addToList: PromiseOrValue<boolean>,
      _regions: PromiseOrValue<string>[],
      _standards: PromiseOrValue<string>[],
      _methodologies: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addToExternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addToExternalERC1155Allowlist(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addToInternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addToInternalBlocklist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkAttributeMatching(
      erc20Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    checkERC1155Eligible(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    checkEligible(erc20Addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    externalAllowlist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    externalERC1155Allowlist(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    internalAllowlist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    internalBlocklist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    methodologies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    methodologiesIsAcceptedMapping(overrides?: CallOverrides): Promise<boolean>;

    minimumVintageStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    regions(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    regionsIsAcceptedMapping(overrides?: CallOverrides): Promise<boolean>;

    removeFromExternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromExternalERC1155Allowlist(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromInternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromInternalBlocklist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumVintageStartTime(
      _minimumVintageStartTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToucanContractRegistry(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    standards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    standardsIsAcceptedMapping(overrides?: CallOverrides): Promise<boolean>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    switchMapping(
      _mappingName: PromiseOrValue<string>,
      accepted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'AttributeMethodologyAdded(string)'(methodology?: null): AttributeMethodologyAddedEventFilter;
    AttributeMethodologyAdded(methodology?: null): AttributeMethodologyAddedEventFilter;

    'AttributeMethodologyRemoved(string)'(
      methodology?: null
    ): AttributeMethodologyRemovedEventFilter;
    AttributeMethodologyRemoved(methodology?: null): AttributeMethodologyRemovedEventFilter;

    'AttributeRegionAdded(string)'(region?: null): AttributeRegionAddedEventFilter;
    AttributeRegionAdded(region?: null): AttributeRegionAddedEventFilter;

    'AttributeRegionRemoved(string)'(region?: null): AttributeRegionRemovedEventFilter;
    AttributeRegionRemoved(region?: null): AttributeRegionRemovedEventFilter;

    'AttributeStandardAdded(string)'(standard?: null): AttributeStandardAddedEventFilter;
    AttributeStandardAdded(standard?: null): AttributeStandardAddedEventFilter;

    'AttributeStandardRemoved(string)'(standard?: null): AttributeStandardRemovedEventFilter;
    AttributeStandardRemoved(standard?: null): AttributeStandardRemovedEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'ExternalAddressAllowlisted(address)'(erc20addr?: null): ExternalAddressAllowlistedEventFilter;
    ExternalAddressAllowlisted(erc20addr?: null): ExternalAddressAllowlistedEventFilter;

    'ExternalAddressRemovedFromAllowlist(address)'(
      erc20addr?: null
    ): ExternalAddressRemovedFromAllowlistEventFilter;
    ExternalAddressRemovedFromAllowlist(
      erc20addr?: null
    ): ExternalAddressRemovedFromAllowlistEventFilter;

    'ExternalERC1155TokenAllowlisted(address,uint256)'(
      tokenAddress?: null,
      tokenId?: null
    ): ExternalERC1155TokenAllowlistedEventFilter;
    ExternalERC1155TokenAllowlisted(
      tokenAddress?: null,
      tokenId?: null
    ): ExternalERC1155TokenAllowlistedEventFilter;

    'ExternalERC1155TokenRemovedFromAllowlist(address,uint256)'(
      tokenAddress?: null,
      tokenId?: null
    ): ExternalERC1155TokenRemovedFromAllowlistEventFilter;
    ExternalERC1155TokenRemovedFromAllowlist(
      tokenAddress?: null,
      tokenId?: null
    ): ExternalERC1155TokenRemovedFromAllowlistEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'InternalAddressAllowlisted(address)'(erc20addr?: null): InternalAddressAllowlistedEventFilter;
    InternalAddressAllowlisted(erc20addr?: null): InternalAddressAllowlistedEventFilter;

    'InternalAddressBlocklisted(address)'(erc20addr?: null): InternalAddressBlocklistedEventFilter;
    InternalAddressBlocklisted(erc20addr?: null): InternalAddressBlocklistedEventFilter;

    'InternalAddressRemovedFromAllowlist(address)'(
      erc20addr?: null
    ): InternalAddressRemovedFromAllowlistEventFilter;
    InternalAddressRemovedFromAllowlist(
      erc20addr?: null
    ): InternalAddressRemovedFromAllowlistEventFilter;

    'InternalAddressRemovedFromBlocklist(address)'(
      erc20addr?: null
    ): InternalAddressRemovedFromBlocklistEventFilter;
    InternalAddressRemovedFromBlocklist(
      erc20addr?: null
    ): InternalAddressRemovedFromBlocklistEventFilter;

    'MappingSwitched(string,bool)'(mappingName?: null, accepted?: null): MappingSwitchedEventFilter;
    MappingSwitched(mappingName?: null, accepted?: null): MappingSwitchedEventFilter;

    'MinimumVintageStartTimeUpdated(uint256)'(
      minimumVintageStartTime?: null
    ): MinimumVintageStartTimeUpdatedEventFilter;
    MinimumVintageStartTimeUpdated(
      minimumVintageStartTime?: null
    ): MinimumVintageStartTimeUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    'ToucanRegistrySet(address)'(registry?: null): ToucanRegistrySetEventFilter;
    ToucanRegistrySet(registry?: null): ToucanRegistrySetEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addAttributes(
      addToList: PromiseOrValue<boolean>,
      _regions: PromiseOrValue<string>[],
      _standards: PromiseOrValue<string>[],
      _methodologies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToExternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToExternalERC1155Allowlist(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToInternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToInternalBlocklist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkAttributeMatching(
      erc20Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkERC1155Eligible(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkEligible(erc20Addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    externalAllowlist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    externalERC1155Allowlist(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    internalAllowlist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    internalBlocklist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    methodologies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    methodologiesIsAcceptedMapping(overrides?: CallOverrides): Promise<BigNumber>;

    minimumVintageStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    regions(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    regionsIsAcceptedMapping(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromExternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromExternalERC1155Allowlist(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromInternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromInternalBlocklist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumVintageStartTime(
      _minimumVintageStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToucanContractRegistry(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    standards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    standardsIsAcceptedMapping(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    switchMapping(
      _mappingName: PromiseOrValue<string>,
      accepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAttributes(
      addToList: PromiseOrValue<boolean>,
      _regions: PromiseOrValue<string>[],
      _standards: PromiseOrValue<string>[],
      _methodologies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToExternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToExternalERC1155Allowlist(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToInternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToInternalBlocklist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkAttributeMatching(
      erc20Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkERC1155Eligible(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkEligible(
      erc20Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    externalAllowlist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    externalERC1155Allowlist(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    internalAllowlist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    internalBlocklist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    methodologies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    methodologiesIsAcceptedMapping(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumVintageStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    regions(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    regionsIsAcceptedMapping(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromExternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromExternalERC1155Allowlist(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromInternalAllowlist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromInternalBlocklist(
      erc20Addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumVintageStartTime(
      _minimumVintageStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToucanContractRegistry(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    standards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    standardsIsAcceptedMapping(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    switchMapping(
      _mappingName: PromiseOrValue<string>,
      accepted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
