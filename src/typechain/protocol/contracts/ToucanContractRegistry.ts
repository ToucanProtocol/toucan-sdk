/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common';

export interface ToucanContractRegistryInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'PAUSER_ROLE()': FunctionFragment;
    'VERSION()': FunctionFragment;
    'VERSION_RELEASE_CANDIDATE()': FunctionFragment;
    'addERC20(address,string)': FunctionFragment;
    'carbonOffsetBatchesAddress()': FunctionFragment;
    'carbonProjectVintagesAddress()': FunctionFragment;
    'carbonProjectsAddress()': FunctionFragment;
    'checkERC20(address)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(address[],bytes32[])': FunctionFragment;
    'isValidERC20(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pauseSystem()': FunctionFragment;
    'projectVintageERC20Registry(address)': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'retirementCertificateFractionalizerAddress()': FunctionFragment;
    'retirementCertificateFractionsAddress()': FunctionFragment;
    'retirementCertificatesAddress()': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setCarbonOffsetBatchesAddress(address)': FunctionFragment;
    'setCarbonProjectVintagesAddress(address)': FunctionFragment;
    'setCarbonProjectsAddress(address)': FunctionFragment;
    'setRetirementCertificateFractionalizerAddress(address)': FunctionFragment;
    'setRetirementCertificateFractionsAddress(address)': FunctionFragment;
    'setRetirementCertificatesAddress(address)': FunctionFragment;
    'setToucanCarbonOffsetsEscrowAddress(address)': FunctionFragment;
    'setToucanCarbonOffsetsFactoryAddress(address)': FunctionFragment;
    'supportedStandardRegistries()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'toucanCarbonOffsetFactories(string)': FunctionFragment;
    'toucanCarbonOffsetsEscrowAddress()': FunctionFragment;
    'toucanCarbonOffsetsFactoryAddress(string)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpauseSystem()': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'PAUSER_ROLE'
      | 'VERSION'
      | 'VERSION_RELEASE_CANDIDATE'
      | 'addERC20'
      | 'carbonOffsetBatchesAddress'
      | 'carbonProjectVintagesAddress'
      | 'carbonProjectsAddress'
      | 'checkERC20'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'initialize'
      | 'isValidERC20'
      | 'owner'
      | 'pauseSystem'
      | 'projectVintageERC20Registry'
      | 'proxiableUUID'
      | 'renounceOwnership'
      | 'renounceRole'
      | 'retirementCertificateFractionalizerAddress'
      | 'retirementCertificateFractionsAddress'
      | 'retirementCertificatesAddress'
      | 'revokeRole'
      | 'setCarbonOffsetBatchesAddress'
      | 'setCarbonProjectVintagesAddress'
      | 'setCarbonProjectsAddress'
      | 'setRetirementCertificateFractionalizerAddress'
      | 'setRetirementCertificateFractionsAddress'
      | 'setRetirementCertificatesAddress'
      | 'setToucanCarbonOffsetsEscrowAddress'
      | 'setToucanCarbonOffsetsFactoryAddress'
      | 'supportedStandardRegistries'
      | 'supportsInterface'
      | 'toucanCarbonOffsetFactories'
      | 'toucanCarbonOffsetsEscrowAddress'
      | 'toucanCarbonOffsetsFactoryAddress'
      | 'transferOwnership'
      | 'unpauseSystem'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PAUSER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION_RELEASE_CANDIDATE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'carbonOffsetBatchesAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'carbonProjectVintagesAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'carbonProjectsAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkERC20', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: 'isValidERC20', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauseSystem', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'projectVintageERC20Registry',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'retirementCertificateFractionalizerAddress',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'retirementCertificateFractionsAddress',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'retirementCertificatesAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setCarbonOffsetBatchesAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setCarbonProjectVintagesAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setCarbonProjectsAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setRetirementCertificateFractionalizerAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setRetirementCertificateFractionsAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setRetirementCertificatesAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setToucanCarbonOffsetsEscrowAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setToucanCarbonOffsetsFactoryAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'supportedStandardRegistries', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'toucanCarbonOffsetFactories',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'toucanCarbonOffsetsEscrowAddress',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'toucanCarbonOffsetsFactoryAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'unpauseSystem', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PAUSER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION_RELEASE_CANDIDATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'carbonOffsetBatchesAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'carbonProjectVintagesAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'carbonProjectsAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseSystem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'projectVintageERC20Registry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'retirementCertificateFractionalizerAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'retirementCertificateFractionsAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'retirementCertificatesAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCarbonOffsetBatchesAddress', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setCarbonProjectVintagesAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setCarbonProjectsAddress', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setRetirementCertificateFractionalizerAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRetirementCertificateFractionsAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRetirementCertificatesAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setToucanCarbonOffsetsEscrowAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setToucanCarbonOffsetsFactoryAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'supportedStandardRegistries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toucanCarbonOffsetFactories', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'toucanCarbonOffsetsEscrowAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'toucanCarbonOffsetsFactoryAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpauseSystem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'TCO2FactoryAdded(address,string)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TCO2FactoryAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TCO2FactoryAddedEventObject {
  factory: string;
  standard: string;
}
export type TCO2FactoryAddedEvent = TypedEvent<[string, string], TCO2FactoryAddedEventObject>;

export type TCO2FactoryAddedEventFilter = TypedEventFilter<TCO2FactoryAddedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ToucanContractRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ToucanContractRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    VERSION_RELEASE_CANDIDATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addERC20(
      erc20: PromiseOrValue<string>,
      standardRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    carbonOffsetBatchesAddress(overrides?: CallOverrides): Promise<[string]>;

    carbonProjectVintagesAddress(overrides?: CallOverrides): Promise<[string]>;

    carbonProjectsAddress(overrides?: CallOverrides): Promise<[string]>;

    checkERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _accounts: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValidERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseSystem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    projectVintageERC20Registry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retirementCertificateFractionalizerAddress(overrides?: CallOverrides): Promise<[string]>;

    retirementCertificateFractionsAddress(overrides?: CallOverrides): Promise<[string]>;

    retirementCertificatesAddress(overrides?: CallOverrides): Promise<[string]>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCarbonOffsetBatchesAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCarbonProjectVintagesAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCarbonProjectsAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRetirementCertificateFractionalizerAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRetirementCertificateFractionsAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRetirementCertificatesAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToucanCarbonOffsetsEscrowAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToucanCarbonOffsetsFactoryAddress(
      tco2Factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedStandardRegistries(overrides?: CallOverrides): Promise<[string[]]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toucanCarbonOffsetFactories(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toucanCarbonOffsetsEscrowAddress(overrides?: CallOverrides): Promise<[string]>;

    toucanCarbonOffsetsFactoryAddress(
      standardRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseSystem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  VERSION_RELEASE_CANDIDATE(overrides?: CallOverrides): Promise<BigNumber>;

  addERC20(
    erc20: PromiseOrValue<string>,
    standardRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  carbonOffsetBatchesAddress(overrides?: CallOverrides): Promise<string>;

  carbonProjectVintagesAddress(overrides?: CallOverrides): Promise<string>;

  carbonProjectsAddress(overrides?: CallOverrides): Promise<string>;

  checkERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _accounts: PromiseOrValue<string>[],
    _roles: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValidERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseSystem(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  projectVintageERC20Registry(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retirementCertificateFractionalizerAddress(overrides?: CallOverrides): Promise<string>;

  retirementCertificateFractionsAddress(overrides?: CallOverrides): Promise<string>;

  retirementCertificatesAddress(overrides?: CallOverrides): Promise<string>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCarbonOffsetBatchesAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCarbonProjectVintagesAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCarbonProjectsAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRetirementCertificateFractionalizerAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRetirementCertificateFractionsAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRetirementCertificatesAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToucanCarbonOffsetsEscrowAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToucanCarbonOffsetsFactoryAddress(
    tco2Factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedStandardRegistries(overrides?: CallOverrides): Promise<string[]>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  toucanCarbonOffsetFactories(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  toucanCarbonOffsetsEscrowAddress(overrides?: CallOverrides): Promise<string>;

  toucanCarbonOffsetsFactoryAddress(
    standardRegistry: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseSystem(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    VERSION_RELEASE_CANDIDATE(overrides?: CallOverrides): Promise<BigNumber>;

    addERC20(
      erc20: PromiseOrValue<string>,
      standardRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    carbonOffsetBatchesAddress(overrides?: CallOverrides): Promise<string>;

    carbonProjectVintagesAddress(overrides?: CallOverrides): Promise<string>;

    carbonProjectsAddress(overrides?: CallOverrides): Promise<string>;

    checkERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _accounts: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isValidERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseSystem(overrides?: CallOverrides): Promise<void>;

    projectVintageERC20Registry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    retirementCertificateFractionalizerAddress(overrides?: CallOverrides): Promise<string>;

    retirementCertificateFractionsAddress(overrides?: CallOverrides): Promise<string>;

    retirementCertificatesAddress(overrides?: CallOverrides): Promise<string>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCarbonOffsetBatchesAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCarbonProjectVintagesAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCarbonProjectsAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRetirementCertificateFractionalizerAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRetirementCertificateFractionsAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRetirementCertificatesAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToucanCarbonOffsetsEscrowAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToucanCarbonOffsetsFactoryAddress(
      tco2Factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedStandardRegistries(overrides?: CallOverrides): Promise<string[]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toucanCarbonOffsetFactories(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    toucanCarbonOffsetsEscrowAddress(overrides?: CallOverrides): Promise<string>;

    toucanCarbonOffsetsFactoryAddress(
      standardRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unpauseSystem(overrides?: CallOverrides): Promise<void>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    'TCO2FactoryAdded(address,string)'(
      factory?: PromiseOrValue<string> | null,
      standard?: PromiseOrValue<string> | null
    ): TCO2FactoryAddedEventFilter;
    TCO2FactoryAdded(
      factory?: PromiseOrValue<string> | null,
      standard?: PromiseOrValue<string> | null
    ): TCO2FactoryAddedEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION_RELEASE_CANDIDATE(overrides?: CallOverrides): Promise<BigNumber>;

    addERC20(
      erc20: PromiseOrValue<string>,
      standardRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    carbonOffsetBatchesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    carbonProjectVintagesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    carbonProjectsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    checkERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _accounts: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValidERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseSystem(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    projectVintageERC20Registry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retirementCertificateFractionalizerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    retirementCertificateFractionsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    retirementCertificatesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCarbonOffsetBatchesAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCarbonProjectVintagesAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCarbonProjectsAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRetirementCertificateFractionalizerAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRetirementCertificateFractionsAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRetirementCertificatesAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToucanCarbonOffsetsEscrowAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToucanCarbonOffsetsFactoryAddress(
      tco2Factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedStandardRegistries(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toucanCarbonOffsetFactories(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toucanCarbonOffsetsEscrowAddress(overrides?: CallOverrides): Promise<BigNumber>;

    toucanCarbonOffsetsFactoryAddress(
      standardRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseSystem(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION_RELEASE_CANDIDATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addERC20(
      erc20: PromiseOrValue<string>,
      standardRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    carbonOffsetBatchesAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    carbonProjectVintagesAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    carbonProjectsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkERC20(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _accounts: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValidERC20(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseSystem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    projectVintageERC20Registry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retirementCertificateFractionalizerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retirementCertificateFractionsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retirementCertificatesAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCarbonOffsetBatchesAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCarbonProjectVintagesAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCarbonProjectsAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRetirementCertificateFractionalizerAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRetirementCertificateFractionsAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRetirementCertificatesAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToucanCarbonOffsetsEscrowAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToucanCarbonOffsetsFactoryAddress(
      tco2Factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedStandardRegistries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toucanCarbonOffsetFactories(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toucanCarbonOffsetsEscrowAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toucanCarbonOffsetsFactoryAddress(
      standardRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseSystem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
