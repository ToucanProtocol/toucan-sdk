/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface RetirementCertificateFractionsStorageInterface extends utils.Interface {
  functions: {
    'baseURI()': FunctionFragment;
    'fractions(uint256)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'baseURI' | 'fractions'): FunctionFragment;

  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fractions', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fractions', data: BytesLike): Result;

  events: {};
}

export interface RetirementCertificateFractionsStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RetirementCertificateFractionsStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseURI(overrides?: CallOverrides): Promise<[string]>;

    fractions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        amount: BigNumber;
        projectVintageTokenId: BigNumber;
        createdAt: BigNumber;
        fractioningEntity: string;
        beneficiary: string;
        beneficiaryString: string;
        retirementMessage: string;
        beneficiaryLocation: string;
        consumptionCountryCode: string;
        consumptionPeriodStart: BigNumber;
        consumptionPeriodEnd: BigNumber;
        tokenURI: string;
        extraData: string;
      }
    >;
  };

  baseURI(overrides?: CallOverrides): Promise<string>;

  fractions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      amount: BigNumber;
      projectVintageTokenId: BigNumber;
      createdAt: BigNumber;
      fractioningEntity: string;
      beneficiary: string;
      beneficiaryString: string;
      retirementMessage: string;
      beneficiaryLocation: string;
      consumptionCountryCode: string;
      consumptionPeriodStart: BigNumber;
      consumptionPeriodEnd: BigNumber;
      tokenURI: string;
      extraData: string;
    }
  >;

  callStatic: {
    baseURI(overrides?: CallOverrides): Promise<string>;

    fractions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        amount: BigNumber;
        projectVintageTokenId: BigNumber;
        createdAt: BigNumber;
        fractioningEntity: string;
        beneficiary: string;
        beneficiaryString: string;
        retirementMessage: string;
        beneficiaryLocation: string;
        consumptionCountryCode: string;
        consumptionPeriodStart: BigNumber;
        consumptionPeriodEnd: BigNumber;
        tokenURI: string;
        extraData: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    fractions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fractions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
