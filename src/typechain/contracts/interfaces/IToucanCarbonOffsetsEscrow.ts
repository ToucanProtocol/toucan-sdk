/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export type CreateRetirementRequestParamsStruct = {
  tokenIds: PromiseOrValue<BigNumberish>[];
  amount: PromiseOrValue<BigNumberish>;
  retiringEntityString: PromiseOrValue<string>;
  beneficiary: PromiseOrValue<string>;
  beneficiaryString: PromiseOrValue<string>;
  retirementMessage: PromiseOrValue<string>;
  beneficiaryLocation: PromiseOrValue<string>;
  consumptionCountryCode: PromiseOrValue<string>;
  consumptionPeriodStart: PromiseOrValue<BigNumberish>;
  consumptionPeriodEnd: PromiseOrValue<BigNumberish>;
};

export type CreateRetirementRequestParamsStructOutput = [
  BigNumber[],
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  tokenIds: BigNumber[];
  amount: BigNumber;
  retiringEntityString: string;
  beneficiary: string;
  beneficiaryString: string;
  retirementMessage: string;
  beneficiaryLocation: string;
  consumptionCountryCode: string;
  consumptionPeriodStart: BigNumber;
  consumptionPeriodEnd: BigNumber;
};

export type DetokenizationRequestStruct = {
  user: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  status: PromiseOrValue<BigNumberish>;
  batchTokenIds: PromiseOrValue<BigNumberish>[];
  projectVintageTokenId: PromiseOrValue<BigNumberish>;
};

export type DetokenizationRequestStructOutput = [
  string,
  BigNumber,
  number,
  BigNumber[],
  BigNumber
] & {
  user: string;
  amount: BigNumber;
  status: number;
  batchTokenIds: BigNumber[];
  projectVintageTokenId: BigNumber;
};

export type RetirementRequestStruct = {
  user: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  status: PromiseOrValue<BigNumberish>;
  batchTokenIds: PromiseOrValue<BigNumberish>[];
  retiringEntityString: PromiseOrValue<string>;
  beneficiary: PromiseOrValue<string>;
  beneficiaryString: PromiseOrValue<string>;
  retirementMessage: PromiseOrValue<string>;
  beneficiaryLocation: PromiseOrValue<string>;
  consumptionCountryCode: PromiseOrValue<string>;
  consumptionPeriodStart: PromiseOrValue<BigNumberish>;
  consumptionPeriodEnd: PromiseOrValue<BigNumberish>;
  projectVintageTokenId: PromiseOrValue<BigNumberish>;
};

export type RetirementRequestStructOutput = [
  string,
  BigNumber,
  number,
  BigNumber[],
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  user: string;
  amount: BigNumber;
  status: number;
  batchTokenIds: BigNumber[];
  retiringEntityString: string;
  beneficiary: string;
  beneficiaryString: string;
  retirementMessage: string;
  beneficiaryLocation: string;
  consumptionCountryCode: string;
  consumptionPeriodStart: BigNumber;
  consumptionPeriodEnd: BigNumber;
  projectVintageTokenId: BigNumber;
};

export interface IToucanCarbonOffsetsEscrowInterface extends utils.Interface {
  functions: {
    'createDetokenizationRequest(address,uint256,uint256[])': FunctionFragment;
    'createRetirementRequest(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256))': FunctionFragment;
    'detokenizationRequests(uint256)': FunctionFragment;
    'finalizeDetokenizationRequest(uint256)': FunctionFragment;
    'finalizeRetirementRequest(uint256)': FunctionFragment;
    'retirementRequests(uint256)': FunctionFragment;
    'revertDetokenizationRequest(uint256)': FunctionFragment;
    'revertRetirementRequest(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'createDetokenizationRequest'
      | 'createRetirementRequest'
      | 'detokenizationRequests'
      | 'finalizeDetokenizationRequest'
      | 'finalizeRetirementRequest'
      | 'retirementRequests'
      | 'revertDetokenizationRequest'
      | 'revertRetirementRequest'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'createDetokenizationRequest',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'createRetirementRequest',
    values: [PromiseOrValue<string>, CreateRetirementRequestParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'detokenizationRequests',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeDetokenizationRequest',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeRetirementRequest',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'retirementRequests',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'revertDetokenizationRequest',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'revertRetirementRequest',
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: 'createDetokenizationRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createRetirementRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'detokenizationRequests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalizeDetokenizationRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalizeRetirementRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retirementRequests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revertDetokenizationRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revertRetirementRequest', data: BytesLike): Result;

  events: {};
}

export interface IToucanCarbonOffsetsEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IToucanCarbonOffsetsEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createDetokenizationRequest(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      batchTokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRetirementRequest(
      user: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    detokenizationRequests(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DetokenizationRequestStructOutput]>;

    finalizeDetokenizationRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeRetirementRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retirementRequests(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[RetirementRequestStructOutput]>;

    revertDetokenizationRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revertRetirementRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createDetokenizationRequest(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    batchTokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRetirementRequest(
    user: PromiseOrValue<string>,
    params: CreateRetirementRequestParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  detokenizationRequests(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DetokenizationRequestStructOutput>;

  finalizeDetokenizationRequest(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeRetirementRequest(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retirementRequests(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<RetirementRequestStructOutput>;

  revertDetokenizationRequest(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revertRetirementRequest(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createDetokenizationRequest(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      batchTokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createRetirementRequest(
      user: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    detokenizationRequests(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DetokenizationRequestStructOutput>;

    finalizeDetokenizationRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeRetirementRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    retirementRequests(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RetirementRequestStructOutput>;

    revertDetokenizationRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revertRetirementRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createDetokenizationRequest(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      batchTokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRetirementRequest(
      user: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    detokenizationRequests(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeDetokenizationRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeRetirementRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retirementRequests(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertDetokenizationRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revertRetirementRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createDetokenizationRequest(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      batchTokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRetirementRequest(
      user: PromiseOrValue<string>,
      params: CreateRetirementRequestParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    detokenizationRequests(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeDetokenizationRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeRetirementRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retirementRequests(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertDetokenizationRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revertRetirementRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
