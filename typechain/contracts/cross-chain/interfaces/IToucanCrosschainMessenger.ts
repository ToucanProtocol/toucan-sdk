/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../common';

export type RemoteTokenInformationStruct = {
  tokenAddress: PromiseOrValue<string>;
  timer: PromiseOrValue<BigNumberish>;
};

export type RemoteTokenInformationStructOutput = [string, BigNumber] & {
  tokenAddress: string;
  timer: BigNumber;
};

export interface IToucanCrosschainMessengerInterface extends utils.Interface {
  functions: {
    'bridgeTCO2s(uint32,address[],uint256[],address)': FunctionFragment;
    'quoteBridgeTCO2sFee(uint32,address[],uint256[],address)': FunctionFragment;
    'quoteTokenTransferFee(uint32,address,uint256,address)': FunctionFragment;
    'remoteTokens(address,uint32)': FunctionFragment;
    'transferTokens(uint32,address,uint256)': FunctionFragment;
    'transferTokensToRecipient(uint32,address,uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'bridgeTCO2s'
      | 'quoteBridgeTCO2sFee'
      | 'quoteTokenTransferFee'
      | 'remoteTokens'
      | 'transferTokens'
      | 'transferTokensToRecipient'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'bridgeTCO2s',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteBridgeTCO2sFee',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteTokenTransferFee',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'remoteTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTokens',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTokensToRecipient',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'bridgeTCO2s', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quoteBridgeTCO2sFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quoteTokenTransferFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remoteTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferTokensToRecipient', data: BytesLike): Result;

  events: {};
}

export interface IToucanCrosschainMessenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IToucanCrosschainMessengerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgeTCO2s(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quoteBridgeTCO2sFee(
      destinationDomain: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quoteTokenTransferFee(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    remoteTokens(
      _token: PromiseOrValue<string>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[RemoteTokenInformationStructOutput]>;

    transferTokens(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTokensToRecipient(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bridgeTCO2s(
    destinationDomain: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>[],
    amount: PromiseOrValue<BigNumberish>[],
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quoteBridgeTCO2sFee(
    destinationDomain: PromiseOrValue<BigNumberish>,
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    recipient: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteTokenTransferFee(
    destinationDomain: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  remoteTokens(
    _token: PromiseOrValue<string>,
    _destinationDomain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<RemoteTokenInformationStructOutput>;

  transferTokens(
    destinationDomain: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTokensToRecipient(
    destinationDomain: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridgeTCO2s(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    quoteBridgeTCO2sFee(
      destinationDomain: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteTokenTransferFee(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remoteTokens(
      _token: PromiseOrValue<string>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RemoteTokenInformationStructOutput>;

    transferTokens(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokensToRecipient(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bridgeTCO2s(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quoteBridgeTCO2sFee(
      destinationDomain: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteTokenTransferFee(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remoteTokens(
      _token: PromiseOrValue<string>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferTokens(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTokensToRecipient(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeTCO2s(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quoteBridgeTCO2sFee(
      destinationDomain: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteTokenTransferFee(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remoteTokens(
      _token: PromiseOrValue<string>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferTokens(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTokensToRecipient(
      destinationDomain: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
