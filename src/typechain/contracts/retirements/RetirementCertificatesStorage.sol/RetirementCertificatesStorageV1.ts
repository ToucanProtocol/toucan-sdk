/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../common';

export interface RetirementCertificatesStorageV1Interface extends utils.Interface {
  functions: {
    'baseURI()': FunctionFragment;
    'claimedEvents(uint256)': FunctionFragment;
    'contractRegistry()': FunctionFragment;
    'minValidRetirementAmount()': FunctionFragment;
    'retireEventCounter()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'baseURI'
      | 'claimedEvents'
      | 'contractRegistry'
      | 'minValidRetirementAmount'
      | 'retireEventCounter'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'claimedEvents',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'contractRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minValidRetirementAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'retireEventCounter', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimedEvents', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minValidRetirementAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retireEventCounter', data: BytesLike): Result;

  events: {};
}

export interface RetirementCertificatesStorageV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RetirementCertificatesStorageV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseURI(overrides?: CallOverrides): Promise<[string]>;

    claimedEvents(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    minValidRetirementAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    retireEventCounter(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  baseURI(overrides?: CallOverrides): Promise<string>;

  claimedEvents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  minValidRetirementAmount(overrides?: CallOverrides): Promise<BigNumber>;

  retireEventCounter(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    baseURI(overrides?: CallOverrides): Promise<string>;

    claimedEvents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    minValidRetirementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    retireEventCounter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    claimedEvents(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    minValidRetirementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    retireEventCounter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedEvents(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minValidRetirementAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retireEventCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
