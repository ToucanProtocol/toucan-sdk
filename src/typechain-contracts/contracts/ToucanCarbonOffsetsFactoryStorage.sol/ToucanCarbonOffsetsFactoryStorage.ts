/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface ToucanCarbonOffsetsFactoryStorageInterface extends utils.Interface {
  functions: {
    'allowedBridges(address)': FunctionFragment;
    'beacon()': FunctionFragment;
    'bridgeFeeBurnAddress()': FunctionFragment;
    'bridgeFeeBurnPercentageInBase()': FunctionFragment;
    'bridgeFeePercentageInBase()': FunctionFragment;
    'bridgeFeeReceiver()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowedBridges'
      | 'beacon'
      | 'bridgeFeeBurnAddress'
      | 'bridgeFeeBurnPercentageInBase'
      | 'bridgeFeePercentageInBase'
      | 'bridgeFeeReceiver'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowedBridges', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'beacon', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridgeFeeBurnAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridgeFeeBurnPercentageInBase', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridgeFeePercentageInBase', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridgeFeeReceiver', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'allowedBridges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'beacon', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridgeFeeBurnAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridgeFeeBurnPercentageInBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridgeFeePercentageInBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridgeFeeReceiver', data: BytesLike): Result;

  events: {};
}

export interface ToucanCarbonOffsetsFactoryStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ToucanCarbonOffsetsFactoryStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowedBridges(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    beacon(overrides?: CallOverrides): Promise<[string]>;

    bridgeFeeBurnAddress(overrides?: CallOverrides): Promise<[string]>;

    bridgeFeeBurnPercentageInBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridgeFeePercentageInBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridgeFeeReceiver(overrides?: CallOverrides): Promise<[string]>;
  };

  allowedBridges(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  beacon(overrides?: CallOverrides): Promise<string>;

  bridgeFeeBurnAddress(overrides?: CallOverrides): Promise<string>;

  bridgeFeeBurnPercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

  bridgeFeePercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

  bridgeFeeReceiver(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allowedBridges(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    beacon(overrides?: CallOverrides): Promise<string>;

    bridgeFeeBurnAddress(overrides?: CallOverrides): Promise<string>;

    bridgeFeeBurnPercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeePercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeReceiver(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    allowedBridges(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    beacon(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeBurnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeBurnPercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeePercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedBridges(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFeeBurnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFeeBurnPercentageInBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFeePercentageInBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFeeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
