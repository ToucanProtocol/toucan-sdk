/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface CarbonOffsetBatchesStorageInterface extends utils.Interface {
  functions: {
    'batchTokenCounter()': FunctionFragment;
    'contractRegistry()': FunctionFragment;
    'nftList(uint256)': FunctionFragment;
    'serialNumberApproved(string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'batchTokenCounter'
      | 'contractRegistry'
      | 'nftList'
      | 'serialNumberApproved'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'batchTokenCounter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'contractRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nftList', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'serialNumberApproved',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'batchTokenCounter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nftList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'serialNumberApproved', data: BytesLike): Result;

  events: {};
}

export interface CarbonOffsetBatchesStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CarbonOffsetBatchesStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchTokenCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    nftList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, number, string] & {
        projectVintageTokenId: BigNumber;
        serialNumber: string;
        quantity: BigNumber;
        status: number;
        uri: string;
      }
    >;

    serialNumberApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  batchTokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  nftList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, number, string] & {
      projectVintageTokenId: BigNumber;
      serialNumber: string;
      quantity: BigNumber;
      status: number;
      uri: string;
    }
  >;

  serialNumberApproved(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    batchTokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    nftList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, number, string] & {
        projectVintageTokenId: BigNumber;
        serialNumber: string;
        quantity: BigNumber;
        status: number;
        uri: string;
      }
    >;

    serialNumberApproved(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    batchTokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    nftList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    serialNumberApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchTokenCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    serialNumberApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
