/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../common';

export interface IPoolFilterInterface extends utils.Interface {
  functions: {
    'checkERC1155Eligible(address,uint256)': FunctionFragment;
    'checkEligible(address)': FunctionFragment;
    'methodologies(string)': FunctionFragment;
    'minimumVintageStartTime()': FunctionFragment;
    'regions(string)': FunctionFragment;
    'standards(string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'checkERC1155Eligible'
      | 'checkEligible'
      | 'methodologies'
      | 'minimumVintageStartTime'
      | 'regions'
      | 'standards'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'checkERC1155Eligible',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'checkEligible', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'methodologies', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'minimumVintageStartTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'regions', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'standards', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'checkERC1155Eligible', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkEligible', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'methodologies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minimumVintageStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'regions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'standards', data: BytesLike): Result;

  events: {};
}

export interface IPoolFilter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolFilterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkERC1155Eligible(
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkEligible(erc20Addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    methodologies(
      methodology: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumVintageStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    regions(region: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    standards(standard: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
  };

  checkERC1155Eligible(
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  checkEligible(erc20Addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  methodologies(methodology: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  minimumVintageStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  regions(region: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  standards(standard: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    checkERC1155Eligible(
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    checkEligible(erc20Addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    methodologies(methodology: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    minimumVintageStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    regions(region: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    standards(standard: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    checkERC1155Eligible(
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkEligible(erc20Addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    methodologies(
      methodology: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumVintageStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    regions(region: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    standards(standard: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkERC1155Eligible(
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkEligible(
      erc20Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    methodologies(
      methodology: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumVintageStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    regions(
      region: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    standards(
      standard: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
