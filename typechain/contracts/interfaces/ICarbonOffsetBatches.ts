/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface ICarbonOffsetBatchesInterface extends utils.Interface {
  functions: {
    'getBatchNFTData(uint256)': FunctionFragment;
    'getConfirmationStatus(uint256)': FunctionFragment;
    'getSerialNumber(uint256)': FunctionFragment;
    'setStatusForDetokenizationOrRetirement(uint256,uint8)': FunctionFragment;
    'split(uint256,string,string,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getBatchNFTData'
      | 'getConfirmationStatus'
      | 'getSerialNumber'
      | 'setStatusForDetokenizationOrRetirement'
      | 'split'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'getBatchNFTData',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getConfirmationStatus',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSerialNumber',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setStatusForDetokenizationOrRetirement',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'split',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'getBatchNFTData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getConfirmationStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSerialNumber', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setStatusForDetokenizationOrRetirement',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'split', data: BytesLike): Result;

  events: {};
}

export interface ICarbonOffsetBatches extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICarbonOffsetBatchesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBatchNFTData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>;

    getConfirmationStatus(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSerialNumber(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setStatusForDetokenizationOrRetirement(
      tokenId: PromiseOrValue<BigNumberish>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    split(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenIdNewSerialNumber: PromiseOrValue<string>,
      newTokenIdSerialNumber: PromiseOrValue<string>,
      newTokenIdQuantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getBatchNFTData(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number]>;

  getConfirmationStatus(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getSerialNumber(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setStatusForDetokenizationOrRetirement(
    tokenId: PromiseOrValue<BigNumberish>,
    newStatus: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  split(
    tokenId: PromiseOrValue<BigNumberish>,
    tokenIdNewSerialNumber: PromiseOrValue<string>,
    newTokenIdSerialNumber: PromiseOrValue<string>,
    newTokenIdQuantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBatchNFTData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>;

    getConfirmationStatus(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getSerialNumber(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setStatusForDetokenizationOrRetirement(
      tokenId: PromiseOrValue<BigNumberish>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    split(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenIdNewSerialNumber: PromiseOrValue<string>,
      newTokenIdSerialNumber: PromiseOrValue<string>,
      newTokenIdQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getBatchNFTData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfirmationStatus(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSerialNumber(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setStatusForDetokenizationOrRetirement(
      tokenId: PromiseOrValue<BigNumberish>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    split(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenIdNewSerialNumber: PromiseOrValue<string>,
      newTokenIdSerialNumber: PromiseOrValue<string>,
      newTokenIdQuantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBatchNFTData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfirmationStatus(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSerialNumber(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setStatusForDetokenizationOrRetirement(
      tokenId: PromiseOrValue<BigNumberish>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    split(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenIdNewSerialNumber: PromiseOrValue<string>,
      newTokenIdSerialNumber: PromiseOrValue<string>,
      newTokenIdQuantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
