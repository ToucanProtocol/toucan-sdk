/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../../common';

export type FeeDistributionStruct = {
  recipients: PromiseOrValue<string>[];
  shares: PromiseOrValue<BigNumberish>[];
};

export type FeeDistributionStructOutput = [string[], BigNumber[]] & {
  recipients: string[];
  shares: BigNumber[];
};

export interface IFeeCalculatorInterface extends utils.Interface {
  functions: {
    'calculateDepositFees(address,address,uint256)': FunctionFragment;
    'calculateDepositFees(address,address,uint256,uint256)': FunctionFragment;
    'calculateRedemptionFees(address,address[],uint256[],uint256[])': FunctionFragment;
    'calculateRedemptionFees(address,address[],uint256[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'calculateDepositFees(address,address,uint256)'
      | 'calculateDepositFees(address,address,uint256,uint256)'
      | 'calculateRedemptionFees(address,address[],uint256[],uint256[])'
      | 'calculateRedemptionFees(address,address[],uint256[])'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'calculateDepositFees(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateDepositFees(address,address,uint256,uint256)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateRedemptionFees(address,address[],uint256[],uint256[])',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateRedemptionFees(address,address[],uint256[])',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: 'calculateDepositFees(address,address,uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateDepositFees(address,address,uint256,uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateRedemptionFees(address,address[],uint256[],uint256[])',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateRedemptionFees(address,address[],uint256[])',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFeeCalculator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeeCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'calculateDepositFees(address,address,uint256)'(
      pool: PromiseOrValue<string>,
      tco2: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[FeeDistributionStructOutput] & { feeDistribution: FeeDistributionStructOutput }>;

    'calculateDepositFees(address,address,uint256,uint256)'(
      pool: PromiseOrValue<string>,
      erc1155: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[FeeDistributionStructOutput] & { feeDistribution: FeeDistributionStructOutput }>;

    'calculateRedemptionFees(address,address[],uint256[],uint256[])'(
      pool: PromiseOrValue<string>,
      erc1155s: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      redemptionAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[FeeDistributionStructOutput] & { feeDistribution: FeeDistributionStructOutput }>;

    'calculateRedemptionFees(address,address[],uint256[])'(
      pool: PromiseOrValue<string>,
      tco2s: PromiseOrValue<string>[],
      redemptionAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[FeeDistributionStructOutput] & { feeDistribution: FeeDistributionStructOutput }>;
  };

  'calculateDepositFees(address,address,uint256)'(
    pool: PromiseOrValue<string>,
    tco2: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<FeeDistributionStructOutput>;

  'calculateDepositFees(address,address,uint256,uint256)'(
    pool: PromiseOrValue<string>,
    erc1155: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<FeeDistributionStructOutput>;

  'calculateRedemptionFees(address,address[],uint256[],uint256[])'(
    pool: PromiseOrValue<string>,
    erc1155s: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    redemptionAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<FeeDistributionStructOutput>;

  'calculateRedemptionFees(address,address[],uint256[])'(
    pool: PromiseOrValue<string>,
    tco2s: PromiseOrValue<string>[],
    redemptionAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<FeeDistributionStructOutput>;

  callStatic: {
    'calculateDepositFees(address,address,uint256)'(
      pool: PromiseOrValue<string>,
      tco2: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<FeeDistributionStructOutput>;

    'calculateDepositFees(address,address,uint256,uint256)'(
      pool: PromiseOrValue<string>,
      erc1155: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<FeeDistributionStructOutput>;

    'calculateRedemptionFees(address,address[],uint256[],uint256[])'(
      pool: PromiseOrValue<string>,
      erc1155s: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      redemptionAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<FeeDistributionStructOutput>;

    'calculateRedemptionFees(address,address[],uint256[])'(
      pool: PromiseOrValue<string>,
      tco2s: PromiseOrValue<string>[],
      redemptionAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<FeeDistributionStructOutput>;
  };

  filters: {};

  estimateGas: {
    'calculateDepositFees(address,address,uint256)'(
      pool: PromiseOrValue<string>,
      tco2: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateDepositFees(address,address,uint256,uint256)'(
      pool: PromiseOrValue<string>,
      erc1155: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateRedemptionFees(address,address[],uint256[],uint256[])'(
      pool: PromiseOrValue<string>,
      erc1155s: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      redemptionAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateRedemptionFees(address,address[],uint256[])'(
      pool: PromiseOrValue<string>,
      tco2s: PromiseOrValue<string>[],
      redemptionAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    'calculateDepositFees(address,address,uint256)'(
      pool: PromiseOrValue<string>,
      tco2: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculateDepositFees(address,address,uint256,uint256)'(
      pool: PromiseOrValue<string>,
      erc1155: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculateRedemptionFees(address,address[],uint256[],uint256[])'(
      pool: PromiseOrValue<string>,
      erc1155s: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      redemptionAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculateRedemptionFees(address,address[],uint256[])'(
      pool: PromiseOrValue<string>,
      tco2s: PromiseOrValue<string>[],
      redemptionAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
