/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common';

export interface CarbonProjectsStorageInterface extends utils.Interface {
  functions: {
    'baseURI()': FunctionFragment;
    'contractRegistry()': FunctionFragment;
    'pidToTokenId(string)': FunctionFragment;
    'projectData(uint256)': FunctionFragment;
    'projectIds(string)': FunctionFragment;
    'projectTokenCounter()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'validProjectTokenIds(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'baseURI'
      | 'contractRegistry'
      | 'pidToTokenId'
      | 'projectData'
      | 'projectIds'
      | 'projectTokenCounter'
      | 'totalSupply'
      | 'validProjectTokenIds'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'contractRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pidToTokenId', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'projectData',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'projectIds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'projectTokenCounter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'validProjectTokenIds',
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pidToTokenId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'projectData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'projectIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'projectTokenCounter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validProjectTokenIds', data: BytesLike): Result;

  events: {};
}

export interface CarbonProjectsStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CarbonProjectsStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseURI(overrides?: CallOverrides): Promise<[string]>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    pidToTokenId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    projectData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string, string, string] & {
        projectId: string;
        standard: string;
        methodology: string;
        region: string;
        storageMethod: string;
        method: string;
        emissionType: string;
        category: string;
        uri: string;
        beneficiary: string;
      }
    >;

    projectIds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    projectTokenCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    validProjectTokenIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  baseURI(overrides?: CallOverrides): Promise<string>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  pidToTokenId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  projectData(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string, string, string] & {
      projectId: string;
      standard: string;
      methodology: string;
      region: string;
      storageMethod: string;
      method: string;
      emissionType: string;
      category: string;
      uri: string;
      beneficiary: string;
    }
  >;

  projectIds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  projectTokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  validProjectTokenIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    baseURI(overrides?: CallOverrides): Promise<string>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    pidToTokenId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    projectData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, string, string, string] & {
        projectId: string;
        standard: string;
        methodology: string;
        region: string;
        storageMethod: string;
        method: string;
        emissionType: string;
        category: string;
        uri: string;
        beneficiary: string;
      }
    >;

    projectIds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    projectTokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    validProjectTokenIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    pidToTokenId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    projectData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    projectIds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    projectTokenCounter(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    validProjectTokenIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pidToTokenId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectIds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectTokenCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validProjectTokenIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
