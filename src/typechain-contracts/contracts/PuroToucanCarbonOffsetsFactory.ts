/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common';

export interface PuroToucanCarbonOffsetsFactoryInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'DETOKENIZER_ROLE()': FunctionFragment;
    'TOKENIZER_ROLE()': FunctionFragment;
    'VERSION()': FunctionFragment;
    'VERSION_RELEASE_CANDIDATE()': FunctionFragment;
    'addToAllowedBridges(address)': FunctionFragment;
    'allowedBridges(address)': FunctionFragment;
    'beacon()': FunctionFragment;
    'bridgeFeeBurnAddress()': FunctionFragment;
    'bridgeFeeBurnPercentageInBase()': FunctionFragment;
    'bridgeFeeDivider()': FunctionFragment;
    'bridgeFeePercentageInBase()': FunctionFragment;
    'bridgeFeeReceiver()': FunctionFragment;
    'bridgeFeeReceiverAddress()': FunctionFragment;
    'contractRegistry()': FunctionFragment;
    'deployFromVintage(uint256)': FunctionFragment;
    'deployedContracts(uint256)': FunctionFragment;
    'getBridgeFeeAndBurnAmount(uint256)': FunctionFragment;
    'getContracts()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(address,address[],bytes32[])': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'pvIdtoERC20(uint256)': FunctionFragment;
    'removeFromAllowedBridges(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setBeacon(address)': FunctionFragment;
    'setBridgeFeeBurnAddress(address)': FunctionFragment;
    'setBridgeFeeBurnPercentage(uint256)': FunctionFragment;
    'setBridgeFeePercentage(uint256)': FunctionFragment;
    'setBridgeFeeReceiver(address)': FunctionFragment;
    'setToucanContractRegistry(address)': FunctionFragment;
    'standardRegistry()': FunctionFragment;
    'supportedStandards()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'DETOKENIZER_ROLE'
      | 'TOKENIZER_ROLE'
      | 'VERSION'
      | 'VERSION_RELEASE_CANDIDATE'
      | 'addToAllowedBridges'
      | 'allowedBridges'
      | 'beacon'
      | 'bridgeFeeBurnAddress'
      | 'bridgeFeeBurnPercentageInBase'
      | 'bridgeFeeDivider'
      | 'bridgeFeePercentageInBase'
      | 'bridgeFeeReceiver'
      | 'bridgeFeeReceiverAddress'
      | 'contractRegistry'
      | 'deployFromVintage'
      | 'deployedContracts'
      | 'getBridgeFeeAndBurnAmount'
      | 'getContracts'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'initialize'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'proxiableUUID'
      | 'pvIdtoERC20'
      | 'removeFromAllowedBridges'
      | 'renounceOwnership'
      | 'renounceRole'
      | 'revokeRole'
      | 'setBeacon'
      | 'setBridgeFeeBurnAddress'
      | 'setBridgeFeeBurnPercentage'
      | 'setBridgeFeePercentage'
      | 'setBridgeFeeReceiver'
      | 'setToucanContractRegistry'
      | 'standardRegistry'
      | 'supportedStandards'
      | 'supportsInterface'
      | 'transferOwnership'
      | 'unpause'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DETOKENIZER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TOKENIZER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION_RELEASE_CANDIDATE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addToAllowedBridges',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'allowedBridges', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'beacon', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridgeFeeBurnAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridgeFeeBurnPercentageInBase', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridgeFeeDivider', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridgeFeePercentageInBase', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridgeFeeReceiver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridgeFeeReceiverAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'contractRegistry', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deployFromVintage',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'deployedContracts',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBridgeFeeAndBurnAmount',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getContracts', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pvIdtoERC20',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeFromAllowedBridges',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'setBeacon', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setBridgeFeeBurnAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBridgeFeeBurnPercentage',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBridgeFeePercentage',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBridgeFeeReceiver',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setToucanContractRegistry',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'standardRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportedStandards', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DETOKENIZER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TOKENIZER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION_RELEASE_CANDIDATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addToAllowedBridges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowedBridges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'beacon', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridgeFeeBurnAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridgeFeeBurnPercentageInBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridgeFeeDivider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridgeFeePercentageInBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridgeFeeReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridgeFeeReceiverAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployFromVintage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBridgeFeeAndBurnAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pvIdtoERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromAllowedBridges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBeacon', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBridgeFeeBurnAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBridgeFeeBurnPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBridgeFeePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBridgeFeeReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setToucanContractRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'standardRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportedStandards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;

  events: {
    'AddedToAllowedBridges(address)': EventFragment;
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'RemovedFromallowedBridges(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'TokenCreated(uint256,address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddedToAllowedBridges'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemovedFromallowedBridges'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AddedToAllowedBridgesEventObject {
  account: string;
}
export type AddedToAllowedBridgesEvent = TypedEvent<[string], AddedToAllowedBridgesEventObject>;

export type AddedToAllowedBridgesEventFilter = TypedEventFilter<AddedToAllowedBridgesEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RemovedFromallowedBridgesEventObject {
  account: string;
}
export type RemovedFromallowedBridgesEvent = TypedEvent<
  [string],
  RemovedFromallowedBridgesEventObject
>;

export type RemovedFromallowedBridgesEventFilter = TypedEventFilter<RemovedFromallowedBridgesEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokenCreatedEventObject {
  vintageTokenId: BigNumber;
  tokenAddress: string;
}
export type TokenCreatedEvent = TypedEvent<[BigNumber, string], TokenCreatedEventObject>;

export type TokenCreatedEventFilter = TypedEventFilter<TokenCreatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface PuroToucanCarbonOffsetsFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PuroToucanCarbonOffsetsFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DETOKENIZER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TOKENIZER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    VERSION_RELEASE_CANDIDATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToAllowedBridges(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowedBridges(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    beacon(overrides?: CallOverrides): Promise<[string]>;

    bridgeFeeBurnAddress(overrides?: CallOverrides): Promise<[string]>;

    bridgeFeeBurnPercentageInBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridgeFeeDivider(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridgeFeePercentageInBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridgeFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    bridgeFeeReceiverAddress(overrides?: CallOverrides): Promise<[string]>;

    contractRegistry(overrides?: CallOverrides): Promise<[string]>;

    deployFromVintage(
      projectVintageTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployedContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBridgeFeeAndBurnAmount(
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getContracts(overrides?: CallOverrides): Promise<[string[]]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _contractRegistry: PromiseOrValue<string>,
      _accounts: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    pvIdtoERC20(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    removeFromAllowedBridges(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBeacon(
      _beacon: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeFeeBurnAddress(
      _bridgeFeeBurnAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeFeeBurnPercentage(
      _bridgeFeeBurnPercentageInBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeFeePercentage(
      _bridgeFeePercentageInBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeFeeReceiver(
      _bridgeFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToucanContractRegistry(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    standardRegistry(overrides?: CallOverrides): Promise<[string]>;

    supportedStandards(overrides?: CallOverrides): Promise<[string[]]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DETOKENIZER_ROLE(overrides?: CallOverrides): Promise<string>;

  TOKENIZER_ROLE(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  VERSION_RELEASE_CANDIDATE(overrides?: CallOverrides): Promise<BigNumber>;

  addToAllowedBridges(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowedBridges(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  beacon(overrides?: CallOverrides): Promise<string>;

  bridgeFeeBurnAddress(overrides?: CallOverrides): Promise<string>;

  bridgeFeeBurnPercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

  bridgeFeeDivider(overrides?: CallOverrides): Promise<BigNumber>;

  bridgeFeePercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

  bridgeFeeReceiver(overrides?: CallOverrides): Promise<string>;

  bridgeFeeReceiverAddress(overrides?: CallOverrides): Promise<string>;

  contractRegistry(overrides?: CallOverrides): Promise<string>;

  deployFromVintage(
    projectVintageTokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployedContracts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getBridgeFeeAndBurnAmount(
    _quantity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getContracts(overrides?: CallOverrides): Promise<string[]>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _contractRegistry: PromiseOrValue<string>,
    _accounts: PromiseOrValue<string>[],
    _roles: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  pvIdtoERC20(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  removeFromAllowedBridges(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBeacon(
    _beacon: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeFeeBurnAddress(
    _bridgeFeeBurnAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeFeeBurnPercentage(
    _bridgeFeeBurnPercentageInBase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeFeePercentage(
    _bridgeFeePercentageInBase: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeFeeReceiver(
    _bridgeFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToucanContractRegistry(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  standardRegistry(overrides?: CallOverrides): Promise<string>;

  supportedStandards(overrides?: CallOverrides): Promise<string[]>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DETOKENIZER_ROLE(overrides?: CallOverrides): Promise<string>;

    TOKENIZER_ROLE(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    VERSION_RELEASE_CANDIDATE(overrides?: CallOverrides): Promise<BigNumber>;

    addToAllowedBridges(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    allowedBridges(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    beacon(overrides?: CallOverrides): Promise<string>;

    bridgeFeeBurnAddress(overrides?: CallOverrides): Promise<string>;

    bridgeFeeBurnPercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeDivider(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeePercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeReceiver(overrides?: CallOverrides): Promise<string>;

    bridgeFeeReceiverAddress(overrides?: CallOverrides): Promise<string>;

    contractRegistry(overrides?: CallOverrides): Promise<string>;

    deployFromVintage(
      projectVintageTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deployedContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBridgeFeeAndBurnAmount(
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getContracts(overrides?: CallOverrides): Promise<string[]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _contractRegistry: PromiseOrValue<string>,
      _accounts: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    pvIdtoERC20(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    removeFromAllowedBridges(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBeacon(_beacon: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setBridgeFeeBurnAddress(
      _bridgeFeeBurnAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeFeeBurnPercentage(
      _bridgeFeeBurnPercentageInBase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeFeePercentage(
      _bridgeFeePercentageInBase: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeFeeReceiver(
      _bridgeFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToucanContractRegistry(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    standardRegistry(overrides?: CallOverrides): Promise<string>;

    supportedStandards(overrides?: CallOverrides): Promise<string[]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AddedToAllowedBridges(address)'(account?: null): AddedToAllowedBridgesEventFilter;
    AddedToAllowedBridges(account?: null): AddedToAllowedBridgesEventFilter;

    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RemovedFromallowedBridges(address)'(account?: null): RemovedFromallowedBridgesEventFilter;
    RemovedFromallowedBridges(account?: null): RemovedFromallowedBridgesEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    'TokenCreated(uint256,address)'(
      vintageTokenId?: null,
      tokenAddress?: null
    ): TokenCreatedEventFilter;
    TokenCreated(vintageTokenId?: null, tokenAddress?: null): TokenCreatedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DETOKENIZER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TOKENIZER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION_RELEASE_CANDIDATE(overrides?: CallOverrides): Promise<BigNumber>;

    addToAllowedBridges(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowedBridges(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    beacon(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeBurnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeBurnPercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeDivider(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeePercentageInBase(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFeeReceiverAddress(overrides?: CallOverrides): Promise<BigNumber>;

    contractRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    deployFromVintage(
      projectVintageTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployedContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeFeeAndBurnAmount(
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _contractRegistry: PromiseOrValue<string>,
      _accounts: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    pvIdtoERC20(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    removeFromAllowedBridges(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBeacon(
      _beacon: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeFeeBurnAddress(
      _bridgeFeeBurnAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeFeeBurnPercentage(
      _bridgeFeeBurnPercentageInBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeFeePercentage(
      _bridgeFeePercentageInBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeFeeReceiver(
      _bridgeFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToucanContractRegistry(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    standardRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    supportedStandards(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DETOKENIZER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKENIZER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION_RELEASE_CANDIDATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToAllowedBridges(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowedBridges(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFeeBurnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFeeBurnPercentageInBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFeeDivider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFeePercentageInBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFeeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFeeReceiverAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployFromVintage(
      projectVintageTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployedContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeFeeAndBurnAmount(
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _contractRegistry: PromiseOrValue<string>,
      _accounts: PromiseOrValue<string>[],
      _roles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pvIdtoERC20(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromAllowedBridges(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBeacon(
      _beacon: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeFeeBurnAddress(
      _bridgeFeeBurnAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeFeeBurnPercentage(
      _bridgeFeeBurnPercentageInBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeFeePercentage(
      _bridgeFeePercentageInBase: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeFeeReceiver(
      _bridgeFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToucanContractRegistry(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    standardRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportedStandards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
