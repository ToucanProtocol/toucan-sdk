/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  IToucanCarbonOffsets,
  IToucanCarbonOffsetsInterface,
} from '../../../contracts/interfaces/IToucanCarbonOffsets';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'burnFrom',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAttributes',
    outputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'projectId',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'standard',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'methodology',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'region',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'storageMethod',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'method',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'emissionType',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'category',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'uri',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'beneficiary',
            type: 'address',
          },
        ],
        internalType: 'struct ProjectData',
        name: '',
        type: 'tuple',
      },
      {
        components: [
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'uint64',
            name: 'startTime',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'endTime',
            type: 'uint64',
          },
          {
            internalType: 'uint256',
            name: 'projectTokenId',
            type: 'uint256',
          },
          {
            internalType: 'uint64',
            name: 'totalVintageQuantity',
            type: 'uint64',
          },
          {
            internalType: 'bool',
            name: 'isCorsiaCompliant',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'isCCPcompliant',
            type: 'bool',
          },
          {
            internalType: 'string',
            name: 'coBenefits',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'correspAdjustment',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'additionalCertification',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'uri',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'registry',
            type: 'string',
          },
        ],
        internalType: 'struct VintageData',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getVintageData',
    outputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'uint64',
            name: 'startTime',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'endTime',
            type: 'uint64',
          },
          {
            internalType: 'uint256',
            name: 'projectTokenId',
            type: 'uint256',
          },
          {
            internalType: 'uint64',
            name: 'totalVintageQuantity',
            type: 'uint64',
          },
          {
            internalType: 'bool',
            name: 'isCorsiaCompliant',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'isCCPcompliant',
            type: 'bool',
          },
          {
            internalType: 'string',
            name: 'coBenefits',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'correspAdjustment',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'additionalCertification',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'uri',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'registry',
            type: 'string',
          },
        ],
        internalType: 'struct VintageData',
        name: 'vintageData',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'projectVintageTokenId',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'retiringEntityString',
        type: 'string',
      },
      {
        internalType: 'address',
        name: 'beneficiary',
        type: 'address',
      },
      {
        internalType: 'string',
        name: 'beneficiaryString',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'retirementMessage',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'retireAndMintCertificate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'retiringEntity',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint256[]',
            name: 'tokenIds',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'string',
            name: 'retiringEntityString',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'beneficiary',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'beneficiaryString',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'retirementMessage',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'beneficiaryLocation',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'consumptionCountryCode',
            type: 'string',
          },
          {
            internalType: 'uint256',
            name: 'consumptionPeriodStart',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'consumptionPeriodEnd',
            type: 'uint256',
          },
        ],
        internalType: 'struct CreateRetirementRequestParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'retireAndMintCertificateForEntity',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'retireFrom',
    outputs: [
      {
        internalType: 'uint256',
        name: 'retirementEventId',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'standardRegistry',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

export class IToucanCarbonOffsets__factory {
  static readonly abi = _abi;
  static createInterface(): IToucanCarbonOffsetsInterface {
    return new utils.Interface(_abi) as IToucanCarbonOffsetsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IToucanCarbonOffsets {
    return new Contract(address, _abi, signerOrProvider) as IToucanCarbonOffsets;
  }
}
