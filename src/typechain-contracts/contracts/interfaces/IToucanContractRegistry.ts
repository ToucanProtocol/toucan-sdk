/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface IToucanContractRegistryInterface extends utils.Interface {
  functions: {
    'addERC20(address,string)': FunctionFragment;
    'carbonOffsetBatchesAddress()': FunctionFragment;
    'carbonProjectVintagesAddress()': FunctionFragment;
    'carbonProjectsAddress()': FunctionFragment;
    'isValidERC20(address)': FunctionFragment;
    'retirementCertificateFractionalizerAddress()': FunctionFragment;
    'retirementCertificateFractionsAddress()': FunctionFragment;
    'retirementCertificatesAddress()': FunctionFragment;
    'toucanCarbonOffsetsEscrowAddress()': FunctionFragment;
    'toucanCarbonOffsetsFactoryAddress(string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addERC20'
      | 'carbonOffsetBatchesAddress'
      | 'carbonProjectVintagesAddress'
      | 'carbonProjectsAddress'
      | 'isValidERC20'
      | 'retirementCertificateFractionalizerAddress'
      | 'retirementCertificateFractionsAddress'
      | 'retirementCertificatesAddress'
      | 'toucanCarbonOffsetsEscrowAddress'
      | 'toucanCarbonOffsetsFactoryAddress'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'carbonOffsetBatchesAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'carbonProjectVintagesAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'carbonProjectsAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isValidERC20', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'retirementCertificateFractionalizerAddress',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'retirementCertificateFractionsAddress',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'retirementCertificatesAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'toucanCarbonOffsetsEscrowAddress',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'toucanCarbonOffsetsFactoryAddress',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'addERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'carbonOffsetBatchesAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'carbonProjectVintagesAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'carbonProjectsAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidERC20', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'retirementCertificateFractionalizerAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'retirementCertificateFractionsAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'retirementCertificatesAddress', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'toucanCarbonOffsetsEscrowAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'toucanCarbonOffsetsFactoryAddress',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IToucanContractRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IToucanContractRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addERC20(
      erc20: PromiseOrValue<string>,
      standardRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    carbonOffsetBatchesAddress(overrides?: CallOverrides): Promise<[string]>;

    carbonProjectVintagesAddress(overrides?: CallOverrides): Promise<[string]>;

    carbonProjectsAddress(overrides?: CallOverrides): Promise<[string]>;

    isValidERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    retirementCertificateFractionalizerAddress(overrides?: CallOverrides): Promise<[string]>;

    retirementCertificateFractionsAddress(overrides?: CallOverrides): Promise<[string]>;

    retirementCertificatesAddress(overrides?: CallOverrides): Promise<[string]>;

    toucanCarbonOffsetsEscrowAddress(overrides?: CallOverrides): Promise<[string]>;

    toucanCarbonOffsetsFactoryAddress(
      standardRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addERC20(
    erc20: PromiseOrValue<string>,
    standardRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  carbonOffsetBatchesAddress(overrides?: CallOverrides): Promise<string>;

  carbonProjectVintagesAddress(overrides?: CallOverrides): Promise<string>;

  carbonProjectsAddress(overrides?: CallOverrides): Promise<string>;

  isValidERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  retirementCertificateFractionalizerAddress(overrides?: CallOverrides): Promise<string>;

  retirementCertificateFractionsAddress(overrides?: CallOverrides): Promise<string>;

  retirementCertificatesAddress(overrides?: CallOverrides): Promise<string>;

  toucanCarbonOffsetsEscrowAddress(overrides?: CallOverrides): Promise<string>;

  toucanCarbonOffsetsFactoryAddress(
    standardRegistry: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addERC20(
      erc20: PromiseOrValue<string>,
      standardRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    carbonOffsetBatchesAddress(overrides?: CallOverrides): Promise<string>;

    carbonProjectVintagesAddress(overrides?: CallOverrides): Promise<string>;

    carbonProjectsAddress(overrides?: CallOverrides): Promise<string>;

    isValidERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    retirementCertificateFractionalizerAddress(overrides?: CallOverrides): Promise<string>;

    retirementCertificateFractionsAddress(overrides?: CallOverrides): Promise<string>;

    retirementCertificatesAddress(overrides?: CallOverrides): Promise<string>;

    toucanCarbonOffsetsEscrowAddress(overrides?: CallOverrides): Promise<string>;

    toucanCarbonOffsetsFactoryAddress(
      standardRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addERC20(
      erc20: PromiseOrValue<string>,
      standardRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    carbonOffsetBatchesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    carbonProjectVintagesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    carbonProjectsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isValidERC20(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    retirementCertificateFractionalizerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    retirementCertificateFractionsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    retirementCertificatesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    toucanCarbonOffsetsEscrowAddress(overrides?: CallOverrides): Promise<BigNumber>;

    toucanCarbonOffsetsFactoryAddress(
      standardRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addERC20(
      erc20: PromiseOrValue<string>,
      standardRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    carbonOffsetBatchesAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    carbonProjectVintagesAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    carbonProjectsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidERC20(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retirementCertificateFractionalizerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retirementCertificateFractionsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retirementCertificatesAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toucanCarbonOffsetsEscrowAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toucanCarbonOffsetsFactoryAddress(
      standardRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
