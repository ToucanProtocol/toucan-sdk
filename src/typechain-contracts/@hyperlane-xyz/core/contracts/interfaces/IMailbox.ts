/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../../common';

export interface IMailboxInterface extends utils.Interface {
  functions: {
    'defaultHook()': FunctionFragment;
    'defaultIsm()': FunctionFragment;
    'delivered(bytes32)': FunctionFragment;
    'dispatch(uint32,bytes32,bytes,bytes,address)': FunctionFragment;
    'dispatch(uint32,bytes32,bytes,bytes)': FunctionFragment;
    'dispatch(uint32,bytes32,bytes)': FunctionFragment;
    'latestDispatchedId()': FunctionFragment;
    'localDomain()': FunctionFragment;
    'process(bytes,bytes)': FunctionFragment;
    'quoteDispatch(uint32,bytes32,bytes,bytes,address)': FunctionFragment;
    'quoteDispatch(uint32,bytes32,bytes)': FunctionFragment;
    'quoteDispatch(uint32,bytes32,bytes,bytes)': FunctionFragment;
    'recipientIsm(address)': FunctionFragment;
    'requiredHook()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'defaultHook'
      | 'defaultIsm'
      | 'delivered'
      | 'dispatch(uint32,bytes32,bytes,bytes,address)'
      | 'dispatch(uint32,bytes32,bytes,bytes)'
      | 'dispatch(uint32,bytes32,bytes)'
      | 'latestDispatchedId'
      | 'localDomain'
      | 'process'
      | 'quoteDispatch(uint32,bytes32,bytes,bytes,address)'
      | 'quoteDispatch(uint32,bytes32,bytes)'
      | 'quoteDispatch(uint32,bytes32,bytes,bytes)'
      | 'recipientIsm'
      | 'requiredHook'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'defaultHook', values?: undefined): string;
  encodeFunctionData(functionFragment: 'defaultIsm', values?: undefined): string;
  encodeFunctionData(functionFragment: 'delivered', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'dispatch(uint32,bytes32,bytes,bytes,address)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'dispatch(uint32,bytes32,bytes,bytes)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'dispatch(uint32,bytes32,bytes)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: 'latestDispatchedId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'localDomain', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'process',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch(uint32,bytes32,bytes,bytes,address)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch(uint32,bytes32,bytes)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch(uint32,bytes32,bytes,bytes)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'recipientIsm', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'requiredHook', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'defaultHook', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultIsm', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delivered', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'dispatch(uint32,bytes32,bytes,bytes,address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dispatch(uint32,bytes32,bytes,bytes)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'dispatch(uint32,bytes32,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestDispatchedId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'localDomain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'process', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch(uint32,bytes32,bytes,bytes,address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch(uint32,bytes32,bytes)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch(uint32,bytes32,bytes,bytes)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'recipientIsm', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requiredHook', data: BytesLike): Result;

  events: {
    'Dispatch(address,uint32,bytes32,bytes)': EventFragment;
    'DispatchId(bytes32)': EventFragment;
    'Process(uint32,bytes32,address)': EventFragment;
    'ProcessId(bytes32)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Dispatch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DispatchId'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Process'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProcessId'): EventFragment;
}

export interface DispatchEventObject {
  sender: string;
  destination: number;
  recipient: string;
  message: string;
}
export type DispatchEvent = TypedEvent<[string, number, string, string], DispatchEventObject>;

export type DispatchEventFilter = TypedEventFilter<DispatchEvent>;

export interface DispatchIdEventObject {
  messageId: string;
}
export type DispatchIdEvent = TypedEvent<[string], DispatchIdEventObject>;

export type DispatchIdEventFilter = TypedEventFilter<DispatchIdEvent>;

export interface ProcessEventObject {
  origin: number;
  sender: string;
  recipient: string;
}
export type ProcessEvent = TypedEvent<[number, string, string], ProcessEventObject>;

export type ProcessEventFilter = TypedEventFilter<ProcessEvent>;

export interface ProcessIdEventObject {
  messageId: string;
}
export type ProcessIdEvent = TypedEvent<[string], ProcessIdEventObject>;

export type ProcessIdEventFilter = TypedEventFilter<ProcessIdEvent>;

export interface IMailbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMailboxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    defaultHook(overrides?: CallOverrides): Promise<[string]>;

    defaultIsm(overrides?: CallOverrides): Promise<[string]>;

    delivered(messageId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    'dispatch(uint32,bytes32,bytes,bytes,address)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      body: PromiseOrValue<BytesLike>,
      customHookMetadata: PromiseOrValue<BytesLike>,
      customHook: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    'dispatch(uint32,bytes32,bytes,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      body: PromiseOrValue<BytesLike>,
      defaultHookMetadata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    'dispatch(uint32,bytes32,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestDispatchedId(overrides?: CallOverrides): Promise<[string]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    process(
      metadata: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    'quoteDispatch(uint32,bytes32,bytes,bytes,address)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      customHookMetadata: PromiseOrValue<BytesLike>,
      customHook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    'quoteDispatch(uint32,bytes32,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    'quoteDispatch(uint32,bytes32,bytes,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      defaultHookMetadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    recipientIsm(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { module: string }>;

    requiredHook(overrides?: CallOverrides): Promise<[string]>;
  };

  defaultHook(overrides?: CallOverrides): Promise<string>;

  defaultIsm(overrides?: CallOverrides): Promise<string>;

  delivered(messageId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  'dispatch(uint32,bytes32,bytes,bytes,address)'(
    destinationDomain: PromiseOrValue<BigNumberish>,
    recipientAddress: PromiseOrValue<BytesLike>,
    body: PromiseOrValue<BytesLike>,
    customHookMetadata: PromiseOrValue<BytesLike>,
    customHook: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  'dispatch(uint32,bytes32,bytes,bytes)'(
    destinationDomain: PromiseOrValue<BigNumberish>,
    recipientAddress: PromiseOrValue<BytesLike>,
    body: PromiseOrValue<BytesLike>,
    defaultHookMetadata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  'dispatch(uint32,bytes32,bytes)'(
    destinationDomain: PromiseOrValue<BigNumberish>,
    recipientAddress: PromiseOrValue<BytesLike>,
    messageBody: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestDispatchedId(overrides?: CallOverrides): Promise<string>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  process(
    metadata: PromiseOrValue<BytesLike>,
    message: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  'quoteDispatch(uint32,bytes32,bytes,bytes,address)'(
    destinationDomain: PromiseOrValue<BigNumberish>,
    recipientAddress: PromiseOrValue<BytesLike>,
    messageBody: PromiseOrValue<BytesLike>,
    customHookMetadata: PromiseOrValue<BytesLike>,
    customHook: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'quoteDispatch(uint32,bytes32,bytes)'(
    destinationDomain: PromiseOrValue<BigNumberish>,
    recipientAddress: PromiseOrValue<BytesLike>,
    messageBody: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'quoteDispatch(uint32,bytes32,bytes,bytes)'(
    destinationDomain: PromiseOrValue<BigNumberish>,
    recipientAddress: PromiseOrValue<BytesLike>,
    messageBody: PromiseOrValue<BytesLike>,
    defaultHookMetadata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recipientIsm(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  requiredHook(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    defaultHook(overrides?: CallOverrides): Promise<string>;

    defaultIsm(overrides?: CallOverrides): Promise<string>;

    delivered(messageId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    'dispatch(uint32,bytes32,bytes,bytes,address)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      body: PromiseOrValue<BytesLike>,
      customHookMetadata: PromiseOrValue<BytesLike>,
      customHook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    'dispatch(uint32,bytes32,bytes,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      body: PromiseOrValue<BytesLike>,
      defaultHookMetadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    'dispatch(uint32,bytes32,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    latestDispatchedId(overrides?: CallOverrides): Promise<string>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    process(
      metadata: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    'quoteDispatch(uint32,bytes32,bytes,bytes,address)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      customHookMetadata: PromiseOrValue<BytesLike>,
      customHook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'quoteDispatch(uint32,bytes32,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'quoteDispatch(uint32,bytes32,bytes,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      defaultHookMetadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recipientIsm(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    requiredHook(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Dispatch(address,uint32,bytes32,bytes)'(
      sender?: PromiseOrValue<string> | null,
      destination?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): DispatchEventFilter;
    Dispatch(
      sender?: PromiseOrValue<string> | null,
      destination?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): DispatchEventFilter;

    'DispatchId(bytes32)'(messageId?: PromiseOrValue<BytesLike> | null): DispatchIdEventFilter;
    DispatchId(messageId?: PromiseOrValue<BytesLike> | null): DispatchIdEventFilter;

    'Process(uint32,bytes32,address)'(
      origin?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<BytesLike> | null,
      recipient?: PromiseOrValue<string> | null
    ): ProcessEventFilter;
    Process(
      origin?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<BytesLike> | null,
      recipient?: PromiseOrValue<string> | null
    ): ProcessEventFilter;

    'ProcessId(bytes32)'(messageId?: PromiseOrValue<BytesLike> | null): ProcessIdEventFilter;
    ProcessId(messageId?: PromiseOrValue<BytesLike> | null): ProcessIdEventFilter;
  };

  estimateGas: {
    defaultHook(overrides?: CallOverrides): Promise<BigNumber>;

    defaultIsm(overrides?: CallOverrides): Promise<BigNumber>;

    delivered(messageId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    'dispatch(uint32,bytes32,bytes,bytes,address)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      body: PromiseOrValue<BytesLike>,
      customHookMetadata: PromiseOrValue<BytesLike>,
      customHook: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    'dispatch(uint32,bytes32,bytes,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      body: PromiseOrValue<BytesLike>,
      defaultHookMetadata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    'dispatch(uint32,bytes32,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestDispatchedId(overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    process(
      metadata: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    'quoteDispatch(uint32,bytes32,bytes,bytes,address)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      customHookMetadata: PromiseOrValue<BytesLike>,
      customHook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'quoteDispatch(uint32,bytes32,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'quoteDispatch(uint32,bytes32,bytes,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      defaultHookMetadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recipientIsm(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    requiredHook(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    defaultHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultIsm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delivered(
      messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'dispatch(uint32,bytes32,bytes,bytes,address)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      body: PromiseOrValue<BytesLike>,
      customHookMetadata: PromiseOrValue<BytesLike>,
      customHook: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    'dispatch(uint32,bytes32,bytes,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      body: PromiseOrValue<BytesLike>,
      defaultHookMetadata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    'dispatch(uint32,bytes32,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestDispatchedId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    process(
      metadata: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    'quoteDispatch(uint32,bytes32,bytes,bytes,address)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      customHookMetadata: PromiseOrValue<BytesLike>,
      customHook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'quoteDispatch(uint32,bytes32,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'quoteDispatch(uint32,bytes32,bytes,bytes)'(
      destinationDomain: PromiseOrValue<BigNumberish>,
      recipientAddress: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      defaultHookMetadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recipientIsm(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
